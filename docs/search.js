window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pauliopt", "modulename": "pauliopt", "kind": "module", "doc": "<p>A Python library to simplify quantum circuits of Pauli gadgets.\nIt consists of two sub-modules, <code>phase</code> and <code>pauli</code>, detailed below.</p>\n"}, {"fullname": "pauliopt.circuits", "modulename": "pauliopt.circuits", "kind": "module", "doc": "<p>A general class for quantum circuits, with a ZX / Gadget representation.</p>\n"}, {"fullname": "pauliopt.circuits.QISKIT_CONVERSION", "modulename": "pauliopt.circuits", "qualname": "QISKIT_CONVERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;h&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;x&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;y&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;z&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;s&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;sdg&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;t&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;tdg&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;swap&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;cx&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;cy&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;cz&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;ccx&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;ccz&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;rx&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;ry&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;rz&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;crx&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;cry&#x27;: &lt;function &lt;lambda&gt;&gt;, &#x27;crz&#x27;: &lt;function &lt;lambda&gt;&gt;}"}, {"fullname": "pauliopt.circuits.Circuit", "modulename": "pauliopt.circuits", "qualname": "Circuit", "kind": "class", "doc": "<p>Class for representing quantum circuits.</p>\n"}, {"fullname": "pauliopt.circuits.Circuit.__init__", "modulename": "pauliopt.circuits", "qualname": "Circuit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_qubits</span>, </span><span class=\"param\"><span class=\"n\">_gates</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.circuits.Circuit.n_qubits", "modulename": "pauliopt.circuits", "qualname": "Circuit.n_qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.circuits.Circuit.add_gate", "modulename": "pauliopt.circuits", "qualname": "Circuit.add_gate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.circuits.Circuit.add_gates", "modulename": "pauliopt.circuits", "qualname": "Circuit.add_gates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gates</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.circuits.Circuit.to_phase_circuit", "modulename": "pauliopt.circuits", "qualname": "Circuit.to_phase_circuit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.circuits.Circuit.from_qiskit", "modulename": "pauliopt.circuits", "qualname": "Circuit.from_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qc</span><span class=\"p\">:</span> <span class=\"n\">qiskit</span><span class=\"o\">.</span><span class=\"n\">circuit</span><span class=\"o\">.</span><span class=\"n\">quantumcircuit</span><span class=\"o\">.</span><span class=\"n\">QuantumCircuit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.circuits.Circuit.to_qiskit", "modulename": "pauliopt.circuits", "qualname": "Circuit.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford", "modulename": "pauliopt.clifford", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.clifford", "modulename": "pauliopt.clifford.clifford", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.clifford.mult_paulis", "modulename": "pauliopt.clifford.clifford", "qualname": "mult_paulis", "kind": "function", "doc": "<p>Small helper function to multiply two Pauli strings and correctly update the sign.</p>\n\n<p>Args:\n    p1 (np.ndarray): Pauli string 1\n    p2 (np.ndarray): Pauli string 2\n    sign1 (int): Sign of Pauli string 1\n    sign2 (int): Sign of Pauli string 2\n    n_qubits (int): Number of qubits in the Pauli strings</p>\n\n<p>Returns:\n    np.ndarray: Pauli string 1 * Pauli string 2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span>, </span><span class=\"param\"><span class=\"n\">sign1</span>, </span><span class=\"param\"><span class=\"n\">sign2</span>, </span><span class=\"param\"><span class=\"n\">n_qubits</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau", "kind": "class", "doc": "<p>Class for storing and manipulating Clifford clifford.\nA Clifford clifford is a representation of a Clifford circuit as a\n2n x 2n binary matrix, where n is the number of qubits. The first n rows\nrepresent the stabilizers, and the last n rows represent the destabilizers.\nThe first n columns represent the X operators, and the last n columns\nrepresent the Z operators.\nThe sign of the operator in row i is given by the i-th entry of\nthe sign vector.</p>\n\n<p>The clifford is initialized as the identity matrix with a zero sign vector.</p>\n\n<p>Args:\n    n_qubits (int): Number of qubits in the clifford.</p>\n\n<p>A more readable representation of the clifford is given by the string:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pauliopt.clifford.clifford</span> <span class=\"kn\">import</span> <span class=\"n\">CliffordTableau</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">CliffordTableau</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span>\n<span class=\"c1\"># Expected Output:</span>\n<span class=\"c1\"># X/Z I/I | +</span>\n<span class=\"c1\"># I/I X/Z | +</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ct</span><span class=\"o\">.</span><span class=\"n\">append_h</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span>\n<span class=\"c1\"># Expected Output:</span>\n<span class=\"c1\"># Z/X I/I | +</span>\n<span class=\"c1\"># I/I X/Z | +</span>\n</code></pre>\n</div>\n\n<p>To get the raw $2n  imes 2n$ matrix representation of the clifford, use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ct</span><span class=\"o\">.</span><span class=\"n\">clifford</span>\n<span class=\"c1\"># Expected Output:</span>\n<span class=\"c1\"># array([[0, 0, 1, 0],</span>\n<span class=\"c1\">#        [0, 1, 0, 0],</span>\n<span class=\"c1\">#        [1, 0, 0, 0],</span>\n<span class=\"c1\">#        [0, 0, 0, 1]], dtype=uint8)</span>\n</code></pre>\n</div>\n\n<p>To get the sign vector, use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ct</span><span class=\"o\">.</span><span class=\"n\">signs</span>\n<span class=\"c1\"># Expected Output:</span>\n<span class=\"c1\"># array([0, 0, 0, 0], dtype=uint8)</span>\n</code></pre>\n</div>\n"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.__init__", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_qubits</span></span>)</span>"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.clifford", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.clifford", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.signs", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.signs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.n_qubits", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.n_qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.from_tableau", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.from_tableau", "kind": "function", "doc": "<p>Create a CliffordTableau from a clifford and sign vector.</p>\n\n<p>Args:\n    clifford (np.ndarray): $2n   imes 2n$ binary matrix representing the clifford.\n    signs (np.ndarray): $2n$-dimensional binary vector representing the sign vector.</p>\n\n<p>Returns:\n    CliffordTableau: CliffordTableau object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clifford</span>, </span><span class=\"param\"><span class=\"n\">signs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.from_qiskit_tableau", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.from_qiskit_tableau", "kind": "function", "doc": "<p>Create a CliffordTableau from a qiskit Clifford object.</p>\n\n<p>Args:\n    qiskit_ct (qiskit.quantum_info.Clifford): Clifford object.</p>\n\n<p>Returns:\n    CliffordTableau: CliffordTableau object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qiskit_ct</span><span class=\"p\">:</span> <span class=\"n\">qiskit</span><span class=\"o\">.</span><span class=\"n\">quantum_info</span><span class=\"o\">.</span><span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">symplectic</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">Clifford</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.string_repr", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.string_repr", "kind": "function", "doc": "<p>Get a string representation of the clifford.</p>\n\n<p>Args:\n    sep (str): Separator between the pauli operators\n    sign_sep (str): Separator between operators and sign.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39; &#39;</span>, </span><span class=\"param\"><span class=\"n\">sign_sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;| &#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.x_out", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.x_out", "kind": "function", "doc": "<p>Get the X operator in row <code>row</code> and column <code>col</code>.</p>\n\n<p>Args:\n    row (int): Row index.\n    col (int): Column index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">col</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.z_out", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.z_out", "kind": "function", "doc": "<p>Get the Z operator in row <code>row</code> and column <code>col</code>.</p>\n\n<p>Args:\n    row (int): Row index.\n    col (int): Column index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">col</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.prepend_h", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.prepend_h", "kind": "function", "doc": "<p>Prepend a Hadamard gate to the clifford.</p>\n\n<p>Args:\n    qubit (int): Qubit the hadamard gate is applied to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.append_h", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.append_h", "kind": "function", "doc": "<p>Append a Hadamard gate to the clifford.</p>\n\n<p>Args:\n    qubit (int): Qubit the hadamard gate is applied to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.prepend_s", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.prepend_s", "kind": "function", "doc": "<p>Prepend a S gate to the clifford.</p>\n\n<p>Args:\n    qubit (int): Qubit the S gate is applied to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.append_s", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.append_s", "kind": "function", "doc": "<p>Append a S gate to the clifford.</p>\n\n<p>Args:\n    qubit (int): Qubit the S gate is applied to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.prepend_cnot", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.prepend_cnot", "kind": "function", "doc": "<p>Prepend a CNOT gate to the clifford.</p>\n\n<p>Args:\n    control (int): Control qubit.\n    target (int): Target qubit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.append_cnot", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.append_cnot", "kind": "function", "doc": "<p>Append a CNOT gate to the clifford.</p>\n\n<p>Args:\n    control (int): Control qubit.\n    target (int): Target qubit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.insert_pauli_row", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.insert_pauli_row", "kind": "function", "doc": "<p>Insert a Pauli row into the clifford.</p>\n\n<p>Args:\n    pauli (np.array): Pauli to be inserted.\n    p_sign (int): Sign of the Pauli.\n    row (int): Row to insert the Pauli.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pauli</span>, </span><span class=\"param\"><span class=\"n\">p_sign</span>, </span><span class=\"param\"><span class=\"n\">row</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.inverse", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.inverse", "kind": "function", "doc": "<p>Invert the clifford.</p>\n\n<p>Note: this is will create a deep copy of the clifford.</p>\n\n<p>Returns:\n    CliffordTableau: Inverted clifford.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.clifford.CliffordTableau.apply", "modulename": "pauliopt.clifford.clifford", "qualname": "CliffordTableau.apply", "kind": "function", "doc": "<p>Apply a CliffordTableau to the current clifford.</p>\n\n<p>Note: this is will create a deep copy of the clifford.</p>\n\n<p>Args:\n    other (CliffordTableau): CliffordTableau to apply.</p>\n\n<p>Returns:\n    CliffordTableau: Applied CliffordTableau.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">CliffordTableau</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis", "modulename": "pauliopt.clifford.tableau_synthesis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.clifford.tableau_synthesis.heurisitc_fkt", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "heurisitc_fkt", "kind": "function", "doc": "<p>The heuristic function for picking the pivot in the clifford synthesis algorithm.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong>:  The row to consider</li>\n<li><strong>G</strong>:  The graph of the topology</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">G</span>, </span><span class=\"param\"><span class=\"n\">remaining</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">CliffordTableau</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.pick_pivot", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "pick_pivot", "kind": "function", "doc": "<p>Pick the pivot to eliminate the next column in the clifford synthesis algorithm.</p>\n\n<p>We currently use the heuristic function h to pick the pivot,\ni.e choose the row with the smallest <code>heurisitc_fkt</code> value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>G</strong>:  The graph of the topology</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n<li><strong>possible_swaps</strong>:  The columns that can be swapped</li>\n<li><strong>include_swaps</strong>:  Whether to include the columns that can be swapped</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">G</span>,</span><span class=\"param\">\t<span class=\"n\">remaining</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">CliffordTableau</span>,</span><span class=\"param\">\t<span class=\"n\">possible_swaps</span>,</span><span class=\"param\">\t<span class=\"n\">include_swaps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.update_dfs", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "update_dfs", "kind": "function", "doc": "<p>Helper function to update the dfs list in place. (See compute_steiner_tree)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dfs</strong>:  The dfs list to update</li>\n<li><strong>parent</strong>:  The parent node</li>\n<li><strong>child</strong>:  The child node</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dfs</span>, </span><span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">child</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.relabel_graph_inplace", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "relabel_graph_inplace", "kind": "function", "doc": "<p>Helper function to relabel the graph in place. (See compute_steiner_tree)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>G</strong>:  The graph to relabel</li>\n<li><strong>parent</strong>:  The parent node</li>\n<li><strong>child</strong>:  The child node</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">G</span>, </span><span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">child</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.compute_steiner_tree", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "compute_steiner_tree", "kind": "function", "doc": "<p>Compute the steiner tree of the sub_graph with the given nodes.\nThis function is a wrapper around the networkx steiner tree function.</p>\n\n<p>It will additionally swap the columns of the remaining clifford to further reduce\nthe amount of CNOTs if include_swaps is True.\nInclude_swaps requires lookup, swappable_nodes, permutation and n_qubits to be set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  The root node of the steiner tree</li>\n<li><strong>nodes</strong>:  The nodes to include in the steiner tree</li>\n<li><p><strong>sub_graph</strong>:  The graph of the topology</p></li>\n<li><p><strong>include_swaps</strong>:  Whether to include swaps in the steiner tree</p></li>\n<li><strong>lookup</strong>:  The lookup table of the topology</li>\n<li><strong>swappable_nodes</strong>:  The nodes that can be swapped</li>\n<li><strong>permutation</strong>:  The permutation of the topology</li>\n<li><strong>n_qubits</strong>:  The number of qubits</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\tnodes: [&lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">sub_graph</span><span class=\"p\">:</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>,</span><span class=\"param\">\t<span class=\"n\">include_swaps</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">lookup</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">swappable_nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">permutation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_qubits</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.is_cutting", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "is_cutting", "kind": "function", "doc": "<p>Check if the given vertex is a cutting vertex in the given graph.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vertex</strong>:  The vertex to check</li>\n<li><strong>g</strong>:  The graph to check</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vertex</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.sanitize_z", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "sanitize_z", "kind": "function", "doc": "<p>Sanitization process for the stabilizer part.</p>\n\n<p>Essentially:</p>\n\n<ul>\n<li>If the z_out is Y (=3), then apply S</li>\n<li>If the z_out is X (=1), then apply H</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong>:  The row of the clifford</li>\n<li><strong>row_z</strong>:  The row of the clifford for the stabilizer part</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n<li><strong>apply</strong>:  The function to apply a gate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">row_z</span>, </span><span class=\"param\"><span class=\"n\">remaining</span>, </span><span class=\"param\"><span class=\"n\">apply</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.sanitize_field_x", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "sanitize_field_x", "kind": "function", "doc": "<p>Sanitization process for the destabilizer part.</p>\n\n<p>Essentially:</p>\n\n<ul>\n<li>If the x_out is Y (=3), then apply S</li>\n<li>If the x_out is X (=2), then apply H</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong>:  The row of the clifford</li>\n<li><strong>row_x</strong>:  The row of the clifford for the destabilizer part</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n<li><strong>apply</strong>:  The function to apply a gate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">row_x</span>, </span><span class=\"param\"><span class=\"n\">remaining</span>, </span><span class=\"param\"><span class=\"n\">apply</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.remove_interactions", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "remove_interactions", "kind": "function", "doc": "<p>Remove the interactions of the destabilizer/stabilizer part.\nThis function assumed that all elements are Z or I.</p>\n\n<p>Include swaps requires swappable_nodes, permutation and include_swaps to be set.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pivot</strong>:  The pivot of the clifford</li>\n<li><strong>row</strong>:  The specific row of the clifford</li>\n<li><strong>sub_graph</strong>:  The graph of the topology</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n<li><strong>apply</strong>:  The function to apply a gate</li>\n<li><strong>basis</strong>:  The basis of the clifford (x for destabilizer or z for stabilizer)</li>\n<li><strong>swappable_nodes</strong>:  The nodes that can be swapped</li>\n<li><strong>permutation</strong>:  The permutation of the topology</li>\n<li><strong>include_swaps</strong>:  Whether to include swaps in the steiner tree</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pivot</span>,</span><span class=\"param\">\t<span class=\"n\">row</span>,</span><span class=\"param\">\t<span class=\"n\">sub_graph</span>,</span><span class=\"param\">\t<span class=\"n\">remaining</span>,</span><span class=\"param\">\t<span class=\"n\">apply</span>,</span><span class=\"param\">\t<span class=\"n\">basis</span>,</span><span class=\"param\">\t<span class=\"n\">include_swaps</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">swappable_nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">permutation</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.steiner_reduce_column", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "steiner_reduce_column", "kind": "function", "doc": "<p>Steiner reduce a column of the clifford.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pivot</strong>:  The pivot of the clifford</li>\n<li><strong>sub_graph</strong>:  The graph of the topology</li>\n<li><strong>remaining</strong>:  The remaining clifford</li>\n<li><strong>apply</strong>:  The function to apply a gate</li>\n<li><strong>swappable_nodes</strong>:  The nodes that can be swapped</li>\n<li><strong>permutation</strong>:  The permutation of the topology</li>\n<li><strong>include_swaps</strong>:  Whether to include swaps in the steiner tree</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pivot</span>,</span><span class=\"param\">\t<span class=\"n\">sub_graph</span>,</span><span class=\"param\">\t<span class=\"n\">remaining</span>,</span><span class=\"param\">\t<span class=\"n\">apply</span>,</span><span class=\"param\">\t<span class=\"n\">swappable_nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">permutation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_swaps</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.get_non_cutting_vertex", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "get_non_cutting_vertex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">G</span>, </span><span class=\"param\"><span class=\"n\">pivot_col</span>, </span><span class=\"param\"><span class=\"n\">swappable_nodes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.clifford.tableau_synthesis.synthesize_tableau", "modulename": "pauliopt.clifford.tableau_synthesis", "qualname": "synthesize_tableau", "kind": "function", "doc": "<p>Architecture aware synthesis of a Clifford clifford.\nThis is the implementation of the algorithm described in Winderl et. al. [1]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>clifford</strong>:  The Clifford clifford</li>\n<li><strong>topo</strong>:  The topology</li>\n<li><strong>include_swaps</strong>:  Whether to allow initial and final measurement permutations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The synthesized circuit and a inital/final permutation</p>\n</blockquote>\n\n<p>References</p>\n\n<p>[1] Winderl, Huang, et al. \"Architecture-Aware Synthesis of Stabilizer Circuits from Clifford Tableaus.\" arXiv preprint arXiv:2309.08972 (2023).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">clifford</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">clifford</span><span class=\"o\">.</span><span class=\"n\">CliffordTableau</span>,</span><span class=\"param\">\t<span class=\"n\">topo</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">include_swaps</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates", "modulename": "pauliopt.gates", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Gate", "modulename": "pauliopt.gates", "qualname": "Gate", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "abc.ABC"}, {"fullname": "pauliopt.gates.Gate.qubits", "modulename": "pauliopt.gates", "qualname": "Gate.qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Gate.name", "modulename": "pauliopt.gates", "qualname": "Gate.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Gate.width", "modulename": "pauliopt.gates", "qualname": "Gate.width", "kind": "variable", "doc": "<p>Width of gate used for drawing.</p>\n"}, {"fullname": "pauliopt.gates.Gate.draw_zx", "modulename": "pauliopt.gates", "qualname": "Gate.draw_zx", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Gate.draw_box", "modulename": "pauliopt.gates", "qualname": "Gate.draw_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Gate.draw", "modulename": "pauliopt.gates", "qualname": "Gate.draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Gate.gadgets", "modulename": "pauliopt.gates", "qualname": "Gate.gadgets", "kind": "variable", "doc": "<p>List of gadgets used to implement this gate.</p>\n"}, {"fullname": "pauliopt.gates.Gate.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Gate.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.PhaseGate", "modulename": "pauliopt.gates", "qualname": "PhaseGate", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.PhaseGate.phase", "modulename": "pauliopt.gates", "qualname": "PhaseGate.phase", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.H", "modulename": "pauliopt.gates", "qualname": "H", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.H.n_qubits", "modulename": "pauliopt.gates", "qualname": "H.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.H.width", "modulename": "pauliopt.gates", "qualname": "H.width", "kind": "variable", "doc": "<p>Width of gate used for drawing.</p>\n", "default_value": "40"}, {"fullname": "pauliopt.gates.H.decomp", "modulename": "pauliopt.gates", "qualname": "H.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.H.draw", "modulename": "pauliopt.gates", "qualname": "H.draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.H.to_qiskit", "modulename": "pauliopt.gates", "qualname": "H.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.X", "modulename": "pauliopt.gates", "qualname": "X", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.X.n_qubits", "modulename": "pauliopt.gates", "qualname": "X.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.X.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "X.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.X.decomp", "modulename": "pauliopt.gates", "qualname": "X.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.X.to_qiskit", "modulename": "pauliopt.gates", "qualname": "X.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Z", "modulename": "pauliopt.gates", "qualname": "Z", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.Z.n_qubits", "modulename": "pauliopt.gates", "qualname": "Z.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Z.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Z.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Z.decomp", "modulename": "pauliopt.gates", "qualname": "Z.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Z.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Z.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Y", "modulename": "pauliopt.gates", "qualname": "Y", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.Y.n_qubits", "modulename": "pauliopt.gates", "qualname": "Y.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Y.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Y.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Y.decomp", "modulename": "pauliopt.gates", "qualname": "Y.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Y.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Y.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.S", "modulename": "pauliopt.gates", "qualname": "S", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.S.n_qubits", "modulename": "pauliopt.gates", "qualname": "S.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.S.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "S.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.S.decomp", "modulename": "pauliopt.gates", "qualname": "S.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.S.to_qiskit", "modulename": "pauliopt.gates", "qualname": "S.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Sdg", "modulename": "pauliopt.gates", "qualname": "Sdg", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.Sdg.n_qubits", "modulename": "pauliopt.gates", "qualname": "Sdg.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Sdg.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Sdg.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Sdg.decomp", "modulename": "pauliopt.gates", "qualname": "Sdg.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Sdg.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Sdg.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.T", "modulename": "pauliopt.gates", "qualname": "T", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.T.n_qubits", "modulename": "pauliopt.gates", "qualname": "T.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.T.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "T.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.T.decomp", "modulename": "pauliopt.gates", "qualname": "T.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.T.to_qiskit", "modulename": "pauliopt.gates", "qualname": "T.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Tdg", "modulename": "pauliopt.gates", "qualname": "Tdg", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.Tdg.n_qubits", "modulename": "pauliopt.gates", "qualname": "Tdg.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Tdg.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Tdg.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Tdg.decomp", "modulename": "pauliopt.gates", "qualname": "Tdg.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Tdg.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Tdg.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.SWAP", "modulename": "pauliopt.gates", "qualname": "SWAP", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.SWAP.n_qubits", "modulename": "pauliopt.gates", "qualname": "SWAP.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.SWAP.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "SWAP.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.SWAP.decomp", "modulename": "pauliopt.gates", "qualname": "SWAP.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.SWAP.to_qiskit", "modulename": "pauliopt.gates", "qualname": "SWAP.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CX", "modulename": "pauliopt.gates", "qualname": "CX", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.CX.n_qubits", "modulename": "pauliopt.gates", "qualname": "CX.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CX.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CX.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CX.width", "modulename": "pauliopt.gates", "qualname": "CX.width", "kind": "variable", "doc": "<p>Width of gate used for drawing.</p>\n", "default_value": "40"}, {"fullname": "pauliopt.gates.CX.decomp", "modulename": "pauliopt.gates", "qualname": "CX.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CX.draw", "modulename": "pauliopt.gates", "qualname": "CX.draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CX.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CX.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CY", "modulename": "pauliopt.gates", "qualname": "CY", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.CY.n_qubits", "modulename": "pauliopt.gates", "qualname": "CY.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CY.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CY.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CY.decomp", "modulename": "pauliopt.gates", "qualname": "CY.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CY.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CY.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CZ", "modulename": "pauliopt.gates", "qualname": "CZ", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.CZ.n_qubits", "modulename": "pauliopt.gates", "qualname": "CZ.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CZ.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CZ.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CZ.decomp", "modulename": "pauliopt.gates", "qualname": "CZ.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CZ.draw", "modulename": "pauliopt.gates", "qualname": "CZ.draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CZ.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CZ.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CCX", "modulename": "pauliopt.gates", "qualname": "CCX", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.CCX.n_qubits", "modulename": "pauliopt.gates", "qualname": "CCX.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "pauliopt.gates.CCX.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CCX.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CCX.decomp", "modulename": "pauliopt.gates", "qualname": "CCX.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CCX.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CCX.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CCZ", "modulename": "pauliopt.gates", "qualname": "CCZ", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "Gate"}, {"fullname": "pauliopt.gates.CCZ.n_qubits", "modulename": "pauliopt.gates", "qualname": "CCZ.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "pauliopt.gates.CCZ.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CCZ.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CCZ.decomp", "modulename": "pauliopt.gates", "qualname": "CCZ.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CCZ.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CCZ.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Rx", "modulename": "pauliopt.gates", "qualname": "Rx", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.Rx.n_qubits", "modulename": "pauliopt.gates", "qualname": "Rx.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Rx.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Rx.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Rx.decomp", "modulename": "pauliopt.gates", "qualname": "Rx.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Rx.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Rx.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Ry", "modulename": "pauliopt.gates", "qualname": "Ry", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.Ry.n_qubits", "modulename": "pauliopt.gates", "qualname": "Ry.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Ry.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Ry.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Ry.decomp", "modulename": "pauliopt.gates", "qualname": "Ry.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Ry.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Ry.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.Rz", "modulename": "pauliopt.gates", "qualname": "Rz", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.Rz.n_qubits", "modulename": "pauliopt.gates", "qualname": "Rz.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "pauliopt.gates.Rz.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "Rz.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.Rz.decomp", "modulename": "pauliopt.gates", "qualname": "Rz.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.Rz.to_qiskit", "modulename": "pauliopt.gates", "qualname": "Rz.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CRx", "modulename": "pauliopt.gates", "qualname": "CRx", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.CRx.n_qubits", "modulename": "pauliopt.gates", "qualname": "CRx.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CRx.draw_gadget", "modulename": "pauliopt.gates", "qualname": "CRx.draw_gadget", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CRx.decomp", "modulename": "pauliopt.gates", "qualname": "CRx.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CRx.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CRx.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CRy", "modulename": "pauliopt.gates", "qualname": "CRy", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.CRy.n_qubits", "modulename": "pauliopt.gates", "qualname": "CRy.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CRy.draw_gadget", "modulename": "pauliopt.gates", "qualname": "CRy.draw_gadget", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CRy.decomp", "modulename": "pauliopt.gates", "qualname": "CRy.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CRy.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CRy.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CRz", "modulename": "pauliopt.gates", "qualname": "CRz", "kind": "class", "doc": "<p>Base class for quantum gates.</p>\n", "bases": "PhaseGate"}, {"fullname": "pauliopt.gates.CRz.n_qubits", "modulename": "pauliopt.gates", "qualname": "CRz.n_qubits", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "pauliopt.gates.CRz.draw_as_zx", "modulename": "pauliopt.gates", "qualname": "CRz.draw_as_zx", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "pauliopt.gates.CRz.decomp", "modulename": "pauliopt.gates", "qualname": "CRz.decomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.gates.CRz.to_qiskit", "modulename": "pauliopt.gates", "qualname": "CRz.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.gates.CNOT", "modulename": "pauliopt.gates", "qualname": "CNOT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;pauliopt.gates.CX&#x27;&gt;"}, {"fullname": "pauliopt.gates.draw_gadget", "modulename": "pauliopt.gates", "qualname": "draw_gadget", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">builder</span>, </span><span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"n\">row_width</span>, </span><span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">gadget</span>, </span><span class=\"param\"><span class=\"n\">text_above</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli", "modulename": "pauliopt.pauli", "kind": "module", "doc": "<p>This module contains code to create and simplify circuits of Pauli gadgets,\nby conjugation with topologically-aware random circuits of Clifford gates.</p>\n\n<p>Currently in development.</p>\n"}, {"fullname": "pauliopt.pauli.anneal", "modulename": "pauliopt.pauli.anneal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.anneal.pick_random_gate", "modulename": "pauliopt.pauli.anneal", "qualname": "pick_random_gate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span>, </span><span class=\"param\"><span class=\"n\">gate_set</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.anneal.compute_effect", "modulename": "pauliopt.pauli.anneal", "qualname": "compute_effect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pp</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">pauli_polynomial</span><span class=\"o\">.</span><span class=\"n\">PauliPolynomial</span>,</span><span class=\"param\">\t<span class=\"n\">gate</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">clifford_gates</span><span class=\"o\">.</span><span class=\"n\">CliffordGate</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">leg_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.anneal.anneal", "modulename": "pauliopt.pauli.anneal", "qualname": "anneal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pp</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">pauli_polynomial</span><span class=\"o\">.</span><span class=\"n\">PauliPolynomial</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span>,</span><span class=\"param\">\t<span class=\"n\">schedule</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;geometric&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">nr_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_gates", "modulename": "pauliopt.pauli.clifford_gates", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.CX", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.CX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.CX: &#x27;cx&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.CY", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.CY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.CY: &#x27;cy&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.CZ", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.CZ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.CZ: &#x27;cz&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.H", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.H", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.H: &#x27;h&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.S", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.S", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.S: &#x27;s&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordType.V", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordType.V", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CliffordType.V: &#x27;v&#x27;&gt;"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordGate", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordGate", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordGate.c_type", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordGate.c_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_gates.CliffordGate.propagate_pauli", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CliffordGate.propagate_pauli", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gadget</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">pauli_gadget</span><span class=\"o\">.</span><span class=\"n\">PauliGadget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_gates.SingleQubitGate", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "SingleQubitGate", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "CliffordGate, abc.ABC"}, {"fullname": "pauliopt.pauli.clifford_gates.SingleQubitGate.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "SingleQubitGate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">qubit</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.SingleQubitGate.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "SingleQubitGate.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pauliopt.pauli.clifford_gates.SingleQubitGate.qubit", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "SingleQubitGate.qubit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_gates.SingleQubitGate.propagate_pauli", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "SingleQubitGate.propagate_pauli", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gadget</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">pauli_gadget</span><span class=\"o\">.</span><span class=\"n\">PauliGadget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "CliffordGate, abc.ABC"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate.control", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate.control", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate.target", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate.target", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_gates.ControlGate.propagate_pauli", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "ControlGate.propagate_pauli", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gadget</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">pauli_gadget</span><span class=\"o\">.</span><span class=\"n\">PauliGadget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_gates.CX", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CX", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ControlGate"}, {"fullname": "pauliopt.pauli.clifford_gates.CX.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CX.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.CX.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CX.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;XX&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;XY&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;XZ&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, -1), &#x27;XI&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;YX&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;YY&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, -1), &#x27;YZ&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;YI&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;ZX&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;ZY&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;ZZ&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;ZI&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;IX&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;IY&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;IZ&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;II&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.CZ", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CZ", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ControlGate"}, {"fullname": "pauliopt.pauli.clifford_gates.CZ.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CZ.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.CZ.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CZ.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;XX&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;XY&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, -1), &#x27;XZ&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;XI&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;YX&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, -1), &#x27;YY&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;YZ&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;YI&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;ZX&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;ZY&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;ZZ&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;ZI&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;IX&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;IY&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;IZ&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;II&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.CY", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CY", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "ControlGate"}, {"fullname": "pauliopt.pauli.clifford_gates.CY.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CY.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">control</span>, </span><span class=\"param\"><span class=\"n\">target</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.CY.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "CY.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;XX&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, -1), &#x27;XY&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;XZ&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;XI&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;YX&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;YY&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;YZ&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, -1), &#x27;YI&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;ZX&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;ZY&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;ZZ&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;ZI&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1), &#x27;IX&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;IY&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;IZ&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, &lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;II&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, &lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.H", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "H", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "SingleQubitGate"}, {"fullname": "pauliopt.pauli.clifford_gates.H.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "H.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qubit</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.H.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "H.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;X&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;Y&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, -1), &#x27;Z&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;I&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.S", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "S", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "SingleQubitGate"}, {"fullname": "pauliopt.pauli.clifford_gates.S.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "S.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qubit</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.S.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "S.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;X&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, -1), &#x27;Y&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;Z&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, 1), &#x27;I&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.V", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "V", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "SingleQubitGate"}, {"fullname": "pauliopt.pauli.clifford_gates.V.__init__", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "V.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qubit</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_gates.V.rules", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "V.rules", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;X&#x27;: (&lt;Pauli.X: &#x27;X&#x27;&gt;, 1), &#x27;Y&#x27;: (&lt;Pauli.Z: &#x27;Z&#x27;&gt;, -1), &#x27;Z&#x27;: (&lt;Pauli.Y: &#x27;Y&#x27;&gt;, 1), &#x27;I&#x27;: (&lt;Pauli.I: &#x27;I&#x27;&gt;, 1)}"}, {"fullname": "pauliopt.pauli.clifford_gates.generate_random_clifford", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "generate_random_clifford", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c_type</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">clifford_gates</span><span class=\"o\">.</span><span class=\"n\">CliffordType</span>, </span><span class=\"param\"><span class=\"n\">n_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_gates.clifford_to_qiskit", "modulename": "pauliopt.pauli.clifford_gates", "qualname": "clifford_to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clifford</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">clifford_gates</span><span class=\"o\">.</span><span class=\"n\">CliffordGate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_region", "modulename": "pauliopt.pauli.clifford_region", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion.__init__", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span>, </span><span class=\"param\"><span class=\"n\">gates</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion.gates", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion.gates", "kind": "variable", "doc": "<p></p>\n", "annotation": ": [&lt;class &#x27;pauliopt.pauli.clifford_gates.CliffordGate&#x27;&gt;]"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion.num_qubits", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion.num_qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion.add_gate", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion.add_gate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gate</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">clifford_gates</span><span class=\"o\">.</span><span class=\"n\">CliffordGate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.clifford_region.CliffordRegion.to_qiskit", "modulename": "pauliopt.pauli.clifford_region", "qualname": "CliffordRegion.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_gadget", "modulename": "pauliopt.pauli.pauli_gadget", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_gadget.decompose_cnot_ladder_z", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "decompose_cnot_ladder_z", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trg</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">arch</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_gadget.find_minimal_cx_assignment", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "find_minimal_cx_assignment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">arch</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_gadget.PPhase", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PPhase", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_gadget.PPhase.__init__", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PPhase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span>)</span>"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.__init__", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">paulis</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Pauli</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.angle", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.angle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.paulis", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.paulis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.copy", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.two_qubit_count", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.two_qubit_count", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span>, </span><span class=\"param\"><span class=\"n\">leg_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_gadget.PauliGadget.to_qiskit", "modulename": "pauliopt.pauli.pauli_gadget", "qualname": "PauliGadget.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_polynomial", "modulename": "pauliopt.pauli.pauli_polynomial", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.__init__", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span></span>)</span>"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.num_qubits", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.num_qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.pauli_gadgets", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.pauli_gadgets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.num_gadgets", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.num_gadgets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.to_qiskit", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.propagate", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.propagate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gate</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">pauli</span><span class=\"o\">.</span><span class=\"n\">clifford_gates</span><span class=\"o\">.</span><span class=\"n\">CliffordGate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.copy", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.two_qubit_count", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.two_qubit_count", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span>, </span><span class=\"param\"><span class=\"n\">leg_cache</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.pauli_polynomial.PauliPolynomial.to_svg", "modulename": "pauliopt.pauli.pauli_polynomial", "qualname": "PauliPolynomial.to_svg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">vscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">svg_code_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.pauli.utils", "modulename": "pauliopt.pauli.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pauliopt.pauli.utils.Pauli", "modulename": "pauliopt.pauli.utils", "qualname": "Pauli", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "pauliopt.pauli.utils.Pauli.I", "modulename": "pauliopt.pauli.utils", "qualname": "Pauli.I", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.I: &#x27;I&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.Pauli.X", "modulename": "pauliopt.pauli.utils", "qualname": "Pauli.X", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.X: &#x27;X&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.Pauli.Y", "modulename": "pauliopt.pauli.utils", "qualname": "Pauli.Y", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.Y: &#x27;Y&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.Pauli.Z", "modulename": "pauliopt.pauli.utils", "qualname": "Pauli.Z", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.Z: &#x27;Z&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.I", "modulename": "pauliopt.pauli.utils", "qualname": "I", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.I: &#x27;I&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.X", "modulename": "pauliopt.pauli.utils", "qualname": "X", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.X: &#x27;X&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.Y", "modulename": "pauliopt.pauli.utils", "qualname": "Y", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.Y: &#x27;Y&#x27;&gt;"}, {"fullname": "pauliopt.pauli.utils.Z", "modulename": "pauliopt.pauli.utils", "qualname": "Z", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pauli.Z: &#x27;Z&#x27;&gt;"}, {"fullname": "pauliopt.phase", "modulename": "pauliopt.phase", "kind": "module", "doc": "<p>This module contains code to create and simplify circuits of mixed ZX phase gadgets,\nby conjugation with topologically-aware random circuits of CX gates.</p>\n"}, {"fullname": "pauliopt.phase.cx_circuits", "modulename": "pauliopt.phase.cx_circuits", "kind": "module", "doc": "<p>This module contains code to create CX circuits for the optimization\nof circuits of mixed phase gadgets.</p>\n"}, {"fullname": "pauliopt.phase.cx_circuits.GateLike", "modulename": "pauliopt.phase.cx_circuits", "qualname": "GateLike", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[typing.List[int], typing.Tuple[int, int]]"}, {"fullname": "pauliopt.phase.cx_circuits.synthesis_methods", "modulename": "pauliopt.phase.cx_circuits", "qualname": "synthesis_methods", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;permrowcol&#x27;]"}, {"fullname": "pauliopt.phase.cx_circuits.permrowcol", "modulename": "pauliopt.phase.cx_circuits", "qualname": "permrowcol", "kind": "function", "doc": "<p>Generates a sequence of CNOTs reallizing the given parity matrix up to permutation (if reallocate=True) using\nthe algorithm from <a href=\"https://arxiv.org/abs/2205.00724\">https://arxiv.org/abs/2205.00724</a>.</p>\n\n<p>Args:\n    matrix (numpy.NDArray): The binary parity matrix\n    topology (Topology): The target device topology\n    parities_as_columns (bool): Whether the parities in the matrix are row-wise or column-wise. Defaults to False, i.e. row-wise.\n    reallocate (bool, optional): Whether to qubits can re reallocated. Defaults to False.</p>\n\n<p>Raises:\n    ModuleNotFoundError: If 'networkx' or 'galois' is not installed.</p>\n\n<p>Returns:\n    List[Tuple[int]]: List of CNOTs realizing the given parity matrix\n    List[int]: The output permutation of the qubit mapping. Equals [0..n] if reallocate==False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">parities_as_columns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reallocate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer", "kind": "class", "doc": "<p>Container for a layer of CX gates constrained\nby a given qubit topology.</p>\n\n<p>It uses <code>pauliopt.topologies.Matching</code> to keep track of which\ncouplings in the qubit topology are currently occupied by a CX gate,\nand to efficiently determine whether a CX gate can be added to the layer.</p>\n"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.__init__", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">gates</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span>)</span>"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.topology", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.topology", "kind": "variable", "doc": "<p>Readonly property exposing the qubit topology\nconstraining this CX circuit layer.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.num_gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.num_gates", "kind": "variable", "doc": "<p>Readonly property returning the number of gates in this\nCX circuit layer.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.gates", "kind": "variable", "doc": "<p>Readonly property returning the collection of gates in this\nCX circuit layer.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[Tuple[int, int]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.num_flippable_cxs", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.num_flippable_cxs", "kind": "variable", "doc": "<p>Readonly property returning the number of CX gates in this\nCX circuit layer that can be flipped.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.flippable_cxs", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.flippable_cxs", "kind": "variable", "doc": "<p>Readonly property returning the collection of CX gates that\nthat can be currently flipped in this layer, namely:</p>\n\n<ul>\n<li>all gates currently in the layer (will be removed by flip);</li>\n<li>all gates with both qubits currently not covered by a gate\nalready in the layer (will be added by flip).</li>\n</ul>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[Tuple[int, int]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.incident", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.incident", "kind": "function", "doc": "<p>Returns the CX gate incident to the given qubit in this layer,\nor <code>None</code> if there is no gate incident to the qubit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.has_cx", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.has_cx", "kind": "function", "doc": "<p>Checks whether the given CX gate is in the layer:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.is_cx_flippable", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.is_cx_flippable", "kind": "function", "doc": "<p>Checks whether the given CX gate can be flipped in this layer.\nThis is true if:</p>\n\n<ul>\n<li>the gate is present (gate can be removed);</li>\n<li>the gate is not present, and neither the control nor the\ntarget are already covered by some other gate (gate can be added).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.random_flip_cx", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.random_flip_cx", "kind": "function", "doc": "<p>Returns a randomly selected flippable CX gate in this CX circuit layer,\nusing the given random number generator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rng</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">_generator</span><span class=\"o\">.</span><span class=\"n\">Generator</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.flip_cx", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.flip_cx", "kind": "function", "doc": "<p>Adds/removes a CX gate with given control and target to/from the layer.\nRaises <code>ValueError</code> if the gate cannot be added/removed.</p>\n\n<p>The layer is modified in-place and then returned, as per the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent API pattern</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitLayer</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.clone", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.clone", "kind": "function", "doc": "<p>Returns a copy of this CX layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitLayer</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.to_qiskit", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayer.draw", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayer.draw", "kind": "function", "doc": "<p>Draws this CX circuit layer using NetworkX and Matplotlib.</p>\n\n<p>The <code>layout</code> keyword argument can be used to select a NetworkX layout\nfrom the available ones (exposed by <code>Topology.available_nx_layouts</code>).\nThe <code>figsize</code> keyword argument is passed to <code>matplotlib.pyplot.figure</code>:\nif specified, it determines the width and height of the figure being drawn.\nThe <code>zcolor</code> and <code>xcolor</code> keyword arguments are used to determine the colour\nof the Z and X dots in a CX gate (analogous to <code>PhaseCircuit.to_svg</code>).\nKeyword arguments <code>kwargs</code> are those of <code>networkx.draw_networkx</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kamada_kawai&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noshow</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerLike", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerLike", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[pauliopt.phase.cx_circuits.CXCircuitLayer, ForwardRef(&#x27;CXCircuitLayerView&#x27;), typing.Sequence[typing.Union[typing.List[int], typing.Tuple[int, int]]]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLike", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLike", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[ForwardRef(&#x27;CXCircuit&#x27;), ForwardRef(&#x27;CXCircuitView&#x27;), typing.Sequence[typing.Union[pauliopt.phase.cx_circuits.CXCircuitLayer, ForwardRef(&#x27;CXCircuitLayerView&#x27;), typing.Sequence[typing.Union[typing.List[int], typing.Tuple[int, int]]]]]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit", "kind": "class", "doc": "<p>Container for a circuit of CX gates, consisting of a given number of layers\nand constrained by a given qubit topology.</p>\n", "bases": "typing.Sequence[pauliopt.phase.cx_circuits.CXCircuitLayer]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.__init__", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">layers</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitLayer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">output_mapping</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.topology", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.topology", "kind": "variable", "doc": "<p>Readonly property exposing the qubit topology\nconstraining this CX circuit.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.num_gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.num_gates", "kind": "variable", "doc": "<p>Readonly property returning the total number of gates in this\nCX circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.parity_matrix", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.parity_matrix", "kind": "function", "doc": "<p>Generates the parity matrix representing this CX circuit.</p>\n\n<p>Args:\n    parities_as_columns (bool, optional): Boolean determining whether the\n        parity matrix should be represented with parities as columns in the matrix.\n        Defaults to False, meaning that the parities are rows in the matrix.</p>\n\n<p>Returns:\n    numpy.NDArray containing 1s and 0s.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">parities_as_columns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.dag", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.dag", "kind": "function", "doc": "<p>Returns a copy of this CX circuit,\nwith the layers in reverse order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.clone", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.clone", "kind": "function", "doc": "<p>Returns a copy of this CX circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.to_qiskit", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.to_qiskit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;permrowcol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reallocate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parities_as_columns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.draw", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.draw", "kind": "function", "doc": "<p>Draws this CX circuit using NetworkX and Matplotlib.\nKeyword arguments <code>kwargs</code> are those of <code>networkx.draw_networkx</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kamada_kawai&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuit.from_parity_matrix", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuit.from_parity_matrix", "kind": "function", "doc": "<p>Generates a CXCircuit from a given parity matrix, constrained by the given topology</p>\n\n<p>Args:\n    matrix (np.typing.NDArray): The parity matrix to be synthesized\n    topology (Topology): The target device topology\n    parities_as_columns (bool, optional): Whether the parities in the matrix are column-wise or row-wise. Defaults to False, i.e. row-wise.\n    reallocate (bool, optional): Whether the qubits can be reallocated to different registers, i.e. synthesis up to permutation. Defaults to False.\n    method (Literal[\"permrowcol\"], optional): Which synthesis method should be used. Currently only permrowcol is available.</p>\n\n<p>Returns:\n    CXCircuit: Synthesized circuit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">ScalarType</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">parities_as_columns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reallocate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;permrowcol&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;permrowcol&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView", "kind": "class", "doc": "<p>Readonly view on a CX circuit layer.</p>\n"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.__init__", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitLayer</span></span>)</span>"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.topology", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.topology", "kind": "variable", "doc": "<p>Readonly property exposing the qubit topology\nconstraining this CX circuit layer.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.gates", "kind": "variable", "doc": "<p>Readonly property returning the collection of gates in this\nCX circuit layer.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[Tuple[int, int]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.num_gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.num_gates", "kind": "variable", "doc": "<p>Readonly property returning the number of gates in this\nCX circuit layer.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.flippable_cxs", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.flippable_cxs", "kind": "variable", "doc": "<p>Readonly property returning the collection of CX gates that\nthat can be currently flipped in this layer, namely:</p>\n\n<ul>\n<li>all gates currently in the layer (will be removed by flip);</li>\n<li>all gates with both qubits currently not covered by a gate\nalready in the layer (will be added by flip).</li>\n</ul>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[Tuple[int, int]]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.incident", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.incident", "kind": "function", "doc": "<p>Returns the CX gate incident to the given qubit in this layer,\nor <code>None</code> if there is no gate incident to the qubit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.has_cx", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.has_cx", "kind": "function", "doc": "<p>Checks whether the given CX gate is in the layer:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.is_cx_flippable", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.is_cx_flippable", "kind": "function", "doc": "<p>Checks whether the given CX gate can be flipped in this layer.\nThis is true if:</p>\n\n<ul>\n<li>the gate is present (gate can be removed);</li>\n<li>the gate is not present, and neither the control nor the\ntarget are already covered by some other gate (gate can be added).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.clone", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.clone", "kind": "function", "doc": "<p>Returns a copy of this CX layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitLayer</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitLayerView.draw", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitLayerView.draw", "kind": "function", "doc": "<p>Draws this CX circuit layer using NetworkX and Matplotlib.\nKeyword arguments <code>kwargs</code> are those of <code>networkx.draw_networkx</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kamada_kawai&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView", "kind": "class", "doc": "<p>Readonly view on a CX circuit.</p>\n", "bases": "typing.Sequence[pauliopt.phase.cx_circuits.CXCircuitLayerView]"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.__init__", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span></span>)</span>"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.topology", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.topology", "kind": "variable", "doc": "<p>Readonly property exposing the qubit topology\nconstraining this CX circuit.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.num_gates", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.num_gates", "kind": "variable", "doc": "<p>Readonly property returning the number of gates in this\nCX circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.dag", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.dag", "kind": "function", "doc": "<p>Returns a copy of this CX circuit,\nwith the layers in reverse order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.clone", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.clone", "kind": "function", "doc": "<p>Returns a copy of this CX circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.cx_circuits.CXCircuitView.draw", "modulename": "pauliopt.phase.cx_circuits", "qualname": "CXCircuitView.draw", "kind": "function", "doc": "<p>Draws this CX circuit using NetworkX and Matplotlib.\nKeyword arguments <code>kwargs</code> are those of <code>networkx.draw_networkx</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kamada_kawai&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits", "modulename": "pauliopt.phase.optimized_circuits", "kind": "module", "doc": "<p>This module contains code to optimize circuits of mixed ZX phase gadgets\nusing topologically-aware circuits of CNOTs.</p>\n"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingCostLogger", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingCostLogger", "kind": "class", "doc": "<p>Protocol for logger of initial/final cost in annealing.</p>\n", "bases": "typing.Protocol"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingCostLogger.__init__", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingCostLogger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingIterLogger", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingIterLogger", "kind": "class", "doc": "<p>Protocol for logging of iteration info in annealing.</p>\n", "bases": "typing.Protocol"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingIterLogger.__init__", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingIterLogger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingLoggers", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingLoggers", "kind": "class", "doc": "<p>Typed dictionary of loggers for annealing.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingLoggers.log_start", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingLoggers.log_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pauliopt.phase.optimized_circuits.AnnealingCostLogger"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingLoggers.log_iter", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingLoggers.log_iter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pauliopt.phase.optimized_circuits.AnnealingIterLogger"}, {"fullname": "pauliopt.phase.optimized_circuits.AnnealingLoggers.log_end", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "AnnealingLoggers.log_end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pauliopt.phase.optimized_circuits.AnnealingCostLogger"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit", "kind": "class", "doc": "<p>Container for a phase circuit to be progressively optimized.\nThe original phase circuit is passed to the constructor, together\nwith a qubit topology and a fixed number of layers constraining the\nCX circuit to be used for simplification.</p>\n\n<p>To understand the structure of the optimized phase circuit,\nconsider the following code snippet:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">opt_circ</span> <span class=\"o\">=</span> <span class=\"n\">PhaseCircuitCXBlockOptimizer</span><span class=\"p\">(</span><span class=\"n\">orig_circ</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"p\">,</span> <span class=\"n\">num_cx_layers</span><span class=\"p\">)</span>\n    <span class=\"c1\"># perform optimization using the methods of `opt_circ`</span>\n    <span class=\"n\">phase_block</span> <span class=\"o\">=</span> <span class=\"n\">opt_circ</span><span class=\"o\">.</span><span class=\"n\">phase_block</span>\n    <span class=\"n\">cx_block</span> <span class=\"o\">=</span> <span class=\"n\">opt_circ</span><span class=\"o\">.</span><span class=\"n\">cx_block</span>\n</code></pre>\n</div>\n\n<p>The optimized circuit is obtained by composing three blocks:</p>\n\n<ol>\n<li>a first block of CX gates, given by <code>cx_block.dag()</code>\n(the same CX gates of <code>cx_block</code>, but in reverse order);</li>\n<li>a central block of phase gadgets, given by <code>phase_block</code>;</li>\n<li>a final block of CX gates, given by <code>cx_block</code>.</li>\n</ol>\n\n<p>An optional keyword argument <code>circuit_rep</code> (default: 1) can be passed to the\nconstructor to indicate that the original circuit is to be repeated a certain\nnumber of times (default: 1). In the optimized circuit, this is achieved by\nrepeating the <code>phase_block</code> part (at point 2. above) a number of times\ngiven by the <code>circuit_rep</code> argument.\nThe first and last CX blocks are left unaltered (because the intermediate CX\nblocks would cancel each other out in pairs when repeating the optimized circuit).</p>\n"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.__init__", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">phase_block</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span><span class=\"p\">,</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuitView</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">cx_block</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuit</span><span class=\"p\">,</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">cx_circuits</span><span class=\"o\">.</span><span class=\"n\">CXCircuitView</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">circuit_rep</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fresh_angle_vars</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleVar</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qubit_mapping</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">phase_method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;paritysynth&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;steiner-graysynth&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cx_method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;permrowcol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reallocate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.topology", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.topology", "kind": "variable", "doc": "<p>Readonly property exposing the topology constraining the circuit optimization.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.num_qubits", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.num_qubits", "kind": "variable", "doc": "<p>Readonly property exposing the number of qubits spanned by the circuit to be optimized.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.circuit_rep", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.circuit_rep", "kind": "variable", "doc": "<p>Readonly property exposing the number of times that the original circuit is\nto be repeated, for use when computing CX counts.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.phase_block", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.phase_block", "kind": "variable", "doc": "<p>Readonly property exposing a readonly view on the phase block of the optimized circuit.</p>\n", "annotation": ": pauliopt.phase.phase_circuits.PhaseCircuitView"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.cx_block", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.cx_block", "kind": "variable", "doc": "<p>Readonly property exposing a readonly view on the CX block of the optimized circuit.</p>\n", "annotation": ": pauliopt.phase.cx_circuits.CXCircuitView"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.init_cx_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.init_cx_count", "kind": "variable", "doc": "<p>Readonly property exposing the CX count for the original circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.cx_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.cx_count", "kind": "variable", "doc": "<p>Readonly property exposing the current CX count for the optimized circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.init_cx_blocks_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.init_cx_blocks_count", "kind": "variable", "doc": "<p>Readonly property exposing the overall CX count for the two conjugating\nCX blocks at the time the circuit was instantiated.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.cx_blocks_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.cx_blocks_count", "kind": "variable", "doc": "<p>Readonly property exposing the overall CX count for the conjugating\nCX blocks in the currently optimized circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.init_phase_block_cx_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.init_phase_block_cx_count", "kind": "variable", "doc": "<p>Readonly property exposing the overall CX count for a single\nphase block at the time the circuit was instantiated.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.phase_block_cx_count", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.phase_block_cx_count", "kind": "variable", "doc": "<p>Readonly property exposing the overall CX count for a single\nphase block in the currently optimized circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.clone", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.clone", "kind": "function", "doc": "<p>Returns a copy of this optimized phase circuit.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">optimized_circuits</span><span class=\"o\">.</span><span class=\"n\">OptimizedPhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.to_qiskit", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.to_qiskit", "kind": "function", "doc": "<p>Returns the optimized circuit as a Qiskit circuit.</p>\n\n<p>This method relies on the <code>qiskit</code> library being available.\nSpecifically, the <code>circuit</code> argument must be of type\n<code>qiskit.providers.BaseBackend</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.simplify", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.simplify", "kind": "function", "doc": "<p>Simplifies the phase block according to the commutation and fusion\nrules for phase gadgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.anneal", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.anneal", "kind": "function", "doc": "<p>Performs a cycle of simulated annealing optimization,\nusing the given number of iterations, temperature schedule,\ninitial/final temperatures.</p>\n\n<p>The circuit is modified in-place and then returned, as per the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent API pattern</a>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">schedule</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;geometric&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;reciprocal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">TempSchedule</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">loggers</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">optimized_circuits</span><span class=\"o\">.</span><span class=\"n\">AnnealingLoggers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.random_flip_cx", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.random_flip_cx", "kind": "function", "doc": "<p>Randomly flips a CX gate in the CX circuit used for the optimization,\nupdating both the CX circuit and the circuit being optimized.</p>\n\n<p>Returns the layer index and gate (pair of control and target) that were\nflipped (e.g. in case the flip needs to be subsequently undone).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.is_cx_flippable", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.is_cx_flippable", "kind": "function", "doc": "<p>Checks whether the given CX gate can be flipped in the given layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.flip_cx", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.flip_cx", "kind": "function", "doc": "<p>Performs the actions needed to flip the given CX gate in the given layer\nof the CX circuit used for the optimization:</p>\n\n<ul>\n<li>undoes all gates in layers subsequent to the given layer which are\ncausally following the given gate, starting from the last layer and\nworking backwards towards the gate;</li>\n<li>applies the desired gate;</li>\n<li>redoes all gate undone, in reverse order (starting from the gate and\nworking forwards towards the last layer).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.OptimizedPhaseCircuit.to_svg", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "OptimizedPhaseCircuit.to_svg", "kind": "function", "doc": "<p>Returns an SVG representation of this optimized circuit, using\nthe ZX calculus to express phase gadgets and CX gates.</p>\n\n<p>The keyword arguments <code>zcolor</code> and <code>xcolor</code> can be used to\nspecify a colour for the Z and X basis spiders in the circuit.\nThe keyword arguments <code>hscale</code> and <code>vscale</code> can be used to\nscale the circuit representation horizontally and vertically.\nThe keyword argument <code>scale</code> can be used to scale the circuit\nrepresentation isotropically.\nThe keyword argument <code>svg_code_only</code> (default <code>False</code>) can be used\nto specify that the SVG code itself be returned, rather than the\nIPython <code>SVG</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">vscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">svg_code_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.iter_anneal", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "iter_anneal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">cx_blocks</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_anneal_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">opt_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">anneal_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">optimized_circuits</span><span class=\"o\">.</span><span class=\"n\">OptimizedPhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.reverse_traversal_anneal", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "reverse_traversal_anneal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">cx_blocks</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_anneal_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">opt_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">anneal_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">optimized_circuits</span><span class=\"o\">.</span><span class=\"n\">OptimizedPhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.optimized_circuits.reverse_traversal", "modulename": "pauliopt.phase.optimized_circuits", "qualname": "reverse_traversal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">cx_blocks</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_anneal_iters</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">opt_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">anneal_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">optimized_circuits</span><span class=\"o\">.</span><span class=\"n\">OptimizedPhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits", "modulename": "pauliopt.phase.phase_circuits", "kind": "module", "doc": "<p>This module contains code to create circuits of mixed ZX phase gadgets.</p>\n"}, {"fullname": "pauliopt.phase.phase_circuits.synthesis_methods", "modulename": "pauliopt.phase.phase_circuits", "qualname": "synthesis_methods", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;naive&#x27;, &#x27;paritysynth&#x27;, &#x27;steiner-graysynth&#x27;]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget", "kind": "class", "doc": "<p>Immutable container class for a phase gadget.</p>\n"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.__init__", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">basis</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Z&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;X&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">qubits</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.basis", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.basis", "kind": "variable", "doc": "<p>Readonly property exposing the basis for this phase gadget.</p>\n", "annotation": ": Literal[&#x27;Z&#x27;, &#x27;X&#x27;]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.angle", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.angle", "kind": "variable", "doc": "<p>Readonly property exposing the angle for this phase gadget.</p>\n", "annotation": ": pauliopt.utils.AngleExpr"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.qubits", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.qubits", "kind": "variable", "doc": "<p>Readonly property exposing the qubits spanned by this phase gadget.</p>\n", "annotation": ": FrozenSet[int]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.cx_count", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.cx_count", "kind": "function", "doc": "<p>Returns the CX count for an implementation of this phase gadget\non the given topology based on minimum spanning trees (MST).</p>\n\n<p>The optional <code>mapping</code> keyword argument can be used to specify a mapping of\nlogical (circuit) qubits to phyisical (topology) qubits.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.on_qiskit_circuit", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.on_qiskit_circuit", "kind": "function", "doc": "<p>Applies this phase gadget to a given qiskit quantum <code>circuit</code>,\nusing the given <code>topology</code> to determine a minimum spanning\ntree implementation of the gadget.</p>\n\n<p>This method relies on the <code>qiskit</code> library being available.\nSpecifically, the <code>circuit</code> argument must be of type\n<code>qiskit.providers.BaseBackend</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>, </span><span class=\"param\"><span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseGadget.print_impl_info", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseGadget.print_impl_info", "kind": "function", "doc": "<p>Prints information about an implementation of this phase gadget\non the given topology based on minimum spanning trees (MST).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.Z", "modulename": "pauliopt.phase.phase_circuits", "qualname": "Z", "kind": "class", "doc": "<p>Constructs a Z phase gadget with the idiomatic syntax:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">Z</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">qubits</span>\n</code></pre>\n</div>\n"}, {"fullname": "pauliopt.phase.phase_circuits.Z.__init__", "modulename": "pauliopt.phase.phase_circuits", "qualname": "Z.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span>)</span>"}, {"fullname": "pauliopt.phase.phase_circuits.X", "modulename": "pauliopt.phase.phase_circuits", "qualname": "X", "kind": "class", "doc": "<p>Constructs an X phase gadget with the idiomatic syntax:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">qubits</span>\n</code></pre>\n</div>\n"}, {"fullname": "pauliopt.phase.phase_circuits.X.__init__", "modulename": "pauliopt.phase.phase_circuits", "qualname": "X.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span>)</span>"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit", "kind": "class", "doc": "<p>Container class for a circuit of mixed ZX phase gadgets.</p>\n", "bases": "typing.Sequence[pauliopt.phase.phase_circuits.PhaseGadget]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.__init__", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">gadgets</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseGadget</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span>)</span>"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.num_qubits", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.num_qubits", "kind": "variable", "doc": "<p>Readonly property exposing the number of qubits spanned by this phase circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.num_gadgets", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.num_gadgets", "kind": "variable", "doc": "<p>Readonly property exposing the number of phase gadgets in the circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.gadgets", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.gadgets", "kind": "variable", "doc": "<p>Readonly property returning the sequence of phase gadgets in this\nphase circuit, in order from first to last.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": Sequence[pauliopt.phase.phase_circuits.PhaseGadget]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.as_readonly", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.as_readonly", "kind": "variable", "doc": "<p>Returns a readonly view on this circuit.</p>\n", "annotation": ": pauliopt.phase.phase_circuits.PhaseCircuitView"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.set_angles", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.set_angles", "kind": "function", "doc": "<p>Sets all angles for this circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angles</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.refresh_angle_vars", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.refresh_angle_vars", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleVar</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.rx", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.rx", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit X rotation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.rz", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.rz", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Z rotation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.ry", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.ry", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Y rotation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.i", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.i", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit I gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.x", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.x", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit X gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.z", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.z", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit X gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.y", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.y", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Y gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.s", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.s", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit S gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.sdg", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.sdg", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Sdg gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.v", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.v", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit S gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.vdg", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.vdg", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Sdg gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.t", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.t", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit T gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.h", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.h", "kind": "function", "doc": "<p>Phase gadget implementation of single-qubit Hadamard gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">basis</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Z&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;X&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Z&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sign</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cu1", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cu1", "kind": "function", "doc": "<p>Phase gadget implementation of CU1 gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.crz", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.crz", "kind": "function", "doc": "<p>Phase gadget implementation of CRZ gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cry", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cry", "kind": "function", "doc": "<p>Phase gadget implementation of CRY gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.crx", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.crx", "kind": "function", "doc": "<p>Phase gadget implementation of CRX gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cz", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cz", "kind": "function", "doc": "<p>Phase gadget implementation of CZ gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cy", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cy", "kind": "function", "doc": "<p>Phase gadget implementation of CY gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cx", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cx", "kind": "function", "doc": "<p>Phase gadget implementation of CX gate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">tgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.u3", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.u3", "kind": "function", "doc": "<p>Phase gadget implementation of U3 gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">lam</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.ccz", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.ccz", "kind": "function", "doc": "<p>Phase gadget implementation of CCZ gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg3</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.ccy", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.ccy", "kind": "function", "doc": "<p>Phase gadget implementation of CCX gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg3</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.ccx", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.ccx", "kind": "function", "doc": "<p>Phase gadget implementation of CCX gate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">leg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">leg3</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.add_gadget", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.add_gadget", "kind": "function", "doc": "<p>Adds a phase gadget to the circuit.\nThis is rather less efficient than passing the gadgets in the constructor,\nbecause the internal numpy arrays have to be copied in the process.</p>\n\n<p>The circuit is modified in-place and then returned, as per the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent interface pattern</a>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">gadget</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseGadget</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.copy", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cx_count", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cx_count", "kind": "function", "doc": "<p>Returns the CX count for an implementation of this phase gadget\n    on the given topology based on minimum spanning trees (MST).</p>\n\n<pre><code>The optional `mapping` keyword argument can be used to specify a mapping of\nlogical (circuit) qubits to phyisical (topology) qubits.\n</code></pre>\n\n<p>Args:\n    topology (Topology): Target device topology\n    mapping (Optional[Union[Sequence[int], Dict[int, int]]], optional): Used qubit mapping. Defaults to None.\n    method (Literal[\"naive\", \"paritysynth\", \"steiner\", optional): Synthesis method. Defaults to \"naive\".</p>\n\n<p>Raises:\n    TypeError: If topology is not a Topology and if mapping is not a permutation of range(self.num_qubits).</p>\n\n<p>Returns:\n    int: The CX count.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;paritysynth&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;steiner-graysynth&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.mapped", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.mapped", "kind": "function", "doc": "<p>Returns a new phase circuit with the same gadgets but having\nqubits remapped according to the given mapping.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.color_flip", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.color_flip", "kind": "function", "doc": "<p>Returns a new phase circuit with the same gadgets but having\nall basis switched from Z to X and vice versa.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.dagger", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.dagger", "kind": "function", "doc": "<p>Returns a new phase circuit with the same gadgets but having\nall angles negated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.normalize", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.normalize", "kind": "function", "doc": "<p>Fuse and reorder gadgets of the same basis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.to_qiskit", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.to_qiskit", "kind": "function", "doc": "<p>Generates a qiskit QuantumCircuit equivalent to this PhaseCircuit.</p>\n\n<p>Args:\n    topology (Topology): Target device topology\n    simplified (bool, optional): Simplifiy the PhaseCircuit before synthesis. Defaults to True.\n    method (Literal[\"naive\", \"paritysynth\", \"steiner\", optional): Which method of synthesis should be used. Defaults to \"naive\".\n    cx_synth (Literal[\"permrowcol\", \"naive\"], optional): Which method should be used for synthesizing the final CXCircuit. Defaults to \"naive\".\n    return_cx (bool, optional): Whether to return the final CXCircuit separately without synthesizing it. Defaults to False.\n    reallocate (bool, optional): Whether qubit reallocation is allowed when synthesizing the final CXCircuit. Defaults to False.</p>\n\n<p>Raises:\n    ModuleNotFoundError: Requires Qiskit to be installed</p>\n\n<p>Returns:\n    qiskit.QuantumCircuit: The synthesized equivalent circuit\n    CXCircuit (optional): The final CNOTs of the circuit not yet concatinated to the qiskit circuit.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>,</span><span class=\"param\">\t<span class=\"n\">simplified</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;paritysynth&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;steiner-graysynth&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cx_synth</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;permrowcol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;naive&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_cx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reallocate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.to_svg", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.to_svg", "kind": "function", "doc": "<p>Returns an SVG representation of this circuit, using\nthe ZX calculus to express phase gadgets.</p>\n\n<p>The keyword arguments <code>zcolor</code> and <code>xcolor</code> can be used to\nspecify a colour for the Z and X basis spiders in the circuit.\nThe keyword arguments <code>hscale</code> and <code>vscale</code> can be used to\nscale the circuit representation horizontally and vertically.\nThe keyword argument <code>scale</code> can be used to scale the circuit\nrepresentation isotropically.\nThe keyword argument <code>svg_code_only</code> (default <code>False</code>) can be used\nto specify that the SVG code itself be returned, rather than the\nIPython <code>SVG</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">vscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">svg_code_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.cloned", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.cloned", "kind": "function", "doc": "<p>Produces an exact copy of this phase circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.conj_by_cx", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.conj_by_cx", "kind": "function", "doc": "<p>Conjugates this circuit by a CX gate with given control/target.\nThe circuit is modified in-place and then returned, as per the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent interface pattern</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrl</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">trgt</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.simplified", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.simplified", "kind": "function", "doc": "<p>Returns a new phase circuit which has been simplified using the\ncommutation and fusion rules for gadgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.random", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.random", "kind": "function", "doc": "<p>Generates a random circuit of mixed ZX phase gadgets on the given number of qubits,\nwith the given number of gadgets.</p>\n\n<p>The optional argument <code>angle_subdivision</code> (default: 4) can be used to specify the\ndenominator in the random fractional multiples of pi used as values for the angles.</p>\n\n<p>The optional arguments <code>min_legs</code> (default: 1, minimum: 1) and <code>max_legs</code>\n(default: <code>None</code>, minimum <code>min_legs</code>) can be used to specify the minimum and maximum\nnumber of legs for the phase gadgets. If <code>None</code>, <code>max_legs</code> is set to <code>len(qubits)</code>.</p>\n\n<p>The optional argument <code>rng_seed</code> (default: <code>None</code>) is used as seed for the RNG.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_gadgets</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">parametric</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleVar</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">angle_subdivision</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">min_legs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_legs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">diagonal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuit.from_qasm", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuit.from_qasm", "kind": "function", "doc": "<p>Constructs a phase circuit from a QASM program.</p>\n\n<p>An optional mapping from QASM qubits to circuit qubits can be supplied.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qasm</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_classical</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView", "kind": "class", "doc": "<p>Readonly view on a phase circuit.</p>\n"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.__init__", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">circuit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span></span>)</span>"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.num_qubits", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.num_qubits", "kind": "variable", "doc": "<p>Readonly property exposing the number of qubits spanned by the phase circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.num_gadgets", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.num_gadgets", "kind": "variable", "doc": "<p>Readonly property exposing the number of phase gadgets in the circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.gadgets", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.gadgets", "kind": "variable", "doc": "<p>Readonly property returning the sequence of phase gadgets in the\nphase circuit, in order from first to last.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": Sequence[pauliopt.phase.phase_circuits.PhaseGadget]"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.to_svg", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.to_svg", "kind": "function", "doc": "<p>Returns an SVG representation of this circuit, using\nthe ZX calculus to express phase gadgets.</p>\n\n<p>The keyword arguments <code>zcolor</code> and <code>xcolor</code> can be used to\nspecify a colour for the Z and X basis spiders in the circuit.\nThe keyword arguments <code>hscale</code> and <code>vscale</code> can be used to\nscale the circuit representation horizontally and vertically.\nThe keyword argument <code>svg_code_only</code> (default <code>False</code>) can be used\nto specify that the SVG code itself be returned, rather than the\nIPython <code>SVG</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">zcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#CCFFCC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xcolor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#FF8888&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">vscale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">svg_code_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.phase.phase_circuits.PhaseCircuitView.cloned", "modulename": "pauliopt.phase.phase_circuits", "qualname": "PhaseCircuitView.cloned", "kind": "function", "doc": "<p>Produces an exact copy of the phase circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">phase_circuits</span><span class=\"o\">.</span><span class=\"n\">PhaseCircuit</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.qasm", "modulename": "pauliopt.qasm", "kind": "module", "doc": "<p>QASM file parsing</p>\n"}, {"fullname": "pauliopt.qasm.assert_same_size_targets", "modulename": "pauliopt.qasm", "qualname": "assert_same_size_targets", "kind": "function", "doc": "<p>Asserts that all register targets have the same size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">trgts</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">RegTarget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.qasm.QASM", "modulename": "pauliopt.qasm", "qualname": "QASM", "kind": "class", "doc": "<p>QASM program.\nBased on the QASM spec from <a href=\"https://arxiv.org/abs/1707.03429\">arXiv: 1707.03429</a></p>\n", "bases": "typing.Sequence[ForwardRef('QASM.Statement')]"}, {"fullname": "pauliopt.qasm.QASM.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">statements</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">Statement</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.num_qubits", "modulename": "pauliopt.qasm", "qualname": "QASM.num_qubits", "kind": "variable", "doc": "<p>Number of qubits in this circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.qasm.QASM.num_bits", "modulename": "pauliopt.qasm", "qualname": "QASM.num_bits", "kind": "variable", "doc": "<p>Number of bits in this circuit.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.qasm.QASM.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.registers", "kind": "variable", "doc": "<p>Iterator over the registers of this QASM program.</p>\n", "annotation": ": Iterator[Union[pauliopt.qasm.QASM.QReg, pauliopt.qasm.QASM.CReg]]"}, {"fullname": "pauliopt.qasm.QASM.Statement", "modulename": "pauliopt.qasm", "qualname": "QASM.Statement", "kind": "class", "doc": "<p>QASM statement.</p>\n"}, {"fullname": "pauliopt.qasm.QASM.Statement.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Statement.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Statement.parse", "modulename": "pauliopt.qasm", "qualname": "QASM.Statement.parse", "kind": "function", "doc": "<p>Attempts to parse a QASM statement from a line of code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">Statement</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.qasm.QASM.Version", "modulename": "pauliopt.qasm", "qualname": "QASM.Version", "kind": "class", "doc": "<p>QASM version statement.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Version.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Version.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Version.version", "modulename": "pauliopt.qasm", "qualname": "QASM.Version.version", "kind": "variable", "doc": "<p>QASM version.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.qasm.QASM.Reg", "modulename": "pauliopt.qasm", "qualname": "QASM.Reg", "kind": "class", "doc": "<p>Register.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Reg.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Reg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Reg.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Reg.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Reg.name", "modulename": "pauliopt.qasm", "qualname": "QASM.Reg.name", "kind": "variable", "doc": "<p>Register name.</p>\n"}, {"fullname": "pauliopt.qasm.QASM.Reg.size", "modulename": "pauliopt.qasm", "qualname": "QASM.Reg.size", "kind": "variable", "doc": "<p>Register size.</p>\n"}, {"fullname": "pauliopt.qasm.QASM.QReg", "modulename": "pauliopt.qasm", "qualname": "QASM.QReg", "kind": "class", "doc": "<p>Quantum register.</p>\n", "bases": "QASM.Reg"}, {"fullname": "pauliopt.qasm.QASM.QReg.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.QReg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.CReg", "modulename": "pauliopt.qasm", "qualname": "QASM.CReg", "kind": "class", "doc": "<p>Classical register.</p>\n", "bases": "QASM.Reg"}, {"fullname": "pauliopt.qasm.QASM.CReg.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.CReg.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Include", "modulename": "pauliopt.qasm", "qualname": "QASM.Include", "kind": "class", "doc": "<p>QASM include statement.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Include.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Include.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Include.filename", "modulename": "pauliopt.qasm", "qualname": "QASM.Include.filename", "kind": "variable", "doc": "<p>Filename.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.qasm.QASM.Comment", "modulename": "pauliopt.qasm", "qualname": "QASM.Comment", "kind": "class", "doc": "<p>QASM comment statement.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Comment.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Comment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Comment.text", "modulename": "pauliopt.qasm", "qualname": "QASM.Comment.text", "kind": "variable", "doc": "<p>Comment text.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.qasm.QASM.RegTarget", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget", "kind": "class", "doc": "<p>A qreg or creg target.</p>\n"}, {"fullname": "pauliopt.qasm.QASM.RegTarget.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QReg</span><span class=\"p\">,</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">CReg</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.RegTarget.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.RegTarget.register", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget.register", "kind": "variable", "doc": "<p>Register.</p>\n", "annotation": ": Union[pauliopt.qasm.QASM.QReg, pauliopt.qasm.QASM.CReg]"}, {"fullname": "pauliopt.qasm.QASM.RegTarget.pos", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget.pos", "kind": "variable", "doc": "<p>Optional register position.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "pauliopt.qasm.QASM.RegTarget.size", "modulename": "pauliopt.qasm", "qualname": "QASM.RegTarget.size", "kind": "variable", "doc": "<p>Size of this target</p>\n"}, {"fullname": "pauliopt.qasm.QASM.QRegTarget", "modulename": "pauliopt.qasm", "qualname": "QASM.QRegTarget", "kind": "class", "doc": "<p>A qreg target.</p>\n", "bases": "QASM.RegTarget"}, {"fullname": "pauliopt.qasm.QASM.QRegTarget.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.QRegTarget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QReg</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.QRegTarget.register", "modulename": "pauliopt.qasm", "qualname": "QASM.QRegTarget.register", "kind": "variable", "doc": "<p>Register.</p>\n", "annotation": ": pauliopt.qasm.QASM.QReg"}, {"fullname": "pauliopt.qasm.QASM.CRegTarget", "modulename": "pauliopt.qasm", "qualname": "QASM.CRegTarget", "kind": "class", "doc": "<p>A creg target.</p>\n", "bases": "QASM.RegTarget"}, {"fullname": "pauliopt.qasm.QASM.CRegTarget.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.CRegTarget.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">CReg</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.CRegTarget.register", "modulename": "pauliopt.qasm", "qualname": "QASM.CRegTarget.register", "kind": "variable", "doc": "<p>Register.</p>\n", "annotation": ": pauliopt.qasm.QASM.CReg"}, {"fullname": "pauliopt.qasm.QASM.UGate", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate", "kind": "class", "doc": "<p>Statement for a U3 gate.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.UGate.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span>,</span><span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span>,</span><span class=\"param\">\t<span class=\"n\">lam</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span>,</span><span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.UGate.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.UGate.theta", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.theta", "kind": "variable", "doc": "<p>Theta angle for the U3 gate.</p>\n", "annotation": ": pauliopt.utils.Angle"}, {"fullname": "pauliopt.qasm.QASM.UGate.phi", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.phi", "kind": "variable", "doc": "<p>Phi angle for the U3 gate.</p>\n", "annotation": ": pauliopt.utils.Angle"}, {"fullname": "pauliopt.qasm.QASM.UGate.lam", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.lam", "kind": "variable", "doc": "<p>Lambda angle for the U3 gate.</p>\n", "annotation": ": pauliopt.utils.Angle"}, {"fullname": "pauliopt.qasm.QASM.UGate.qubit", "modulename": "pauliopt.qasm", "qualname": "QASM.UGate.qubit", "kind": "variable", "doc": "<p>Qubit/qreg for the U3 gate.</p>\n", "annotation": ": pauliopt.qasm.QASM.QRegTarget"}, {"fullname": "pauliopt.qasm.QASM.CXGate", "modulename": "pauliopt.qasm", "qualname": "QASM.CXGate", "kind": "class", "doc": "<p>Statement for a CX gate.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.CXGate.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.CXGate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.CXGate.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.CXGate.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.CXGate.control", "modulename": "pauliopt.qasm", "qualname": "QASM.CXGate.control", "kind": "variable", "doc": "<p>Control qubit/qreg for the CX gate.</p>\n", "annotation": ": pauliopt.qasm.QASM.QRegTarget"}, {"fullname": "pauliopt.qasm.QASM.CXGate.target", "modulename": "pauliopt.qasm", "qualname": "QASM.CXGate.target", "kind": "variable", "doc": "<p>Target qubit/qreg for the CX gate.</p>\n", "annotation": ": pauliopt.qasm.QASM.QRegTarget"}, {"fullname": "pauliopt.qasm.QASM.Measure", "modulename": "pauliopt.qasm", "qualname": "QASM.Measure", "kind": "class", "doc": "<p>Statement for a measurement.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Measure.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Measure.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span>,</span><span class=\"param\">\t<span class=\"n\">bit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">CRegTarget</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Measure.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Measure.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Measure.qubit", "modulename": "pauliopt.qasm", "qualname": "QASM.Measure.qubit", "kind": "variable", "doc": "<p>Qubit/qreg to be measured.</p>\n", "annotation": ": pauliopt.qasm.QASM.QRegTarget"}, {"fullname": "pauliopt.qasm.QASM.Measure.bit", "modulename": "pauliopt.qasm", "qualname": "QASM.Measure.bit", "kind": "variable", "doc": "<p>Bit/creg to store measurement outcome.</p>\n", "annotation": ": pauliopt.qasm.QASM.CRegTarget"}, {"fullname": "pauliopt.qasm.QASM.Reset", "modulename": "pauliopt.qasm", "qualname": "QASM.Reset", "kind": "class", "doc": "<p>Statement for a reset.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Reset.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Reset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Reset.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Reset.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Reset.qubit", "modulename": "pauliopt.qasm", "qualname": "QASM.Reset.qubit", "kind": "variable", "doc": "<p>Qubit/qreg to be measured.</p>\n", "annotation": ": pauliopt.qasm.QASM.QRegTarget"}, {"fullname": "pauliopt.qasm.QASM.Gate", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate", "kind": "class", "doc": "<p>Statement for a named gate.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Gate.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">RegTarget</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Gate.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Gate.name", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate.name", "kind": "variable", "doc": "<p>Name for this gate.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.qasm.QASM.Gate.params", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate.params", "kind": "variable", "doc": "<p>Tuple of angle parameters for this gate.</p>\n", "annotation": ": Tuple[pauliopt.utils.Angle, ...]"}, {"fullname": "pauliopt.qasm.QASM.Gate.targets", "modulename": "pauliopt.qasm", "qualname": "QASM.Gate.targets", "kind": "variable", "doc": "<p>Tuple of register targets for this gate.</p>\n", "annotation": ": Tuple[pauliopt.qasm.QASM.RegTarget, ...]"}, {"fullname": "pauliopt.qasm.QASM.Barrier", "modulename": "pauliopt.qasm", "qualname": "QASM.Barrier", "kind": "class", "doc": "<p>Statement for a barrier.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Barrier.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Barrier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">QRegTarget</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Barrier.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Barrier.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Barrier.targets", "modulename": "pauliopt.qasm", "qualname": "QASM.Barrier.targets", "kind": "variable", "doc": "<p>Tuple of register targets for this barrier.</p>\n", "annotation": ": Tuple[pauliopt.qasm.QASM.RegTarget, ...]"}, {"fullname": "pauliopt.qasm.QASM.Conditional", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional", "kind": "class", "doc": "<p>Statement for a conditional statement.</p>\n", "bases": "QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.Conditional.__init__", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">register</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">CReg</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">statement</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">qasm</span><span class=\"o\">.</span><span class=\"n\">QASM</span><span class=\"o\">.</span><span class=\"n\">Statement</span></span>)</span>"}, {"fullname": "pauliopt.qasm.QASM.Conditional.registers", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional.registers", "kind": "variable", "doc": "<p>List of registers involved in this statement.</p>\n", "annotation": ": Sequence[pauliopt.qasm.QASM.Reg]"}, {"fullname": "pauliopt.qasm.QASM.Conditional.register", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional.register", "kind": "variable", "doc": "<p>The register being tested in this conditional statement.</p>\n", "annotation": ": pauliopt.qasm.QASM.CReg"}, {"fullname": "pauliopt.qasm.QASM.Conditional.value", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional.value", "kind": "variable", "doc": "<p>The register value being tested in this conditional statement.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.qasm.QASM.Conditional.statement", "modulename": "pauliopt.qasm", "qualname": "QASM.Conditional.statement", "kind": "variable", "doc": "<p>The statement to execute if the given creg has the given value.</p>\n", "annotation": ": pauliopt.qasm.QASM.Statement"}, {"fullname": "pauliopt.qasm.QASM.parse", "modulename": "pauliopt.qasm", "qualname": "QASM.parse", "kind": "function", "doc": "<p>Parses a QASM program into a <code>QASM</code> object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">program</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies", "modulename": "pauliopt.topologies", "kind": "module", "doc": "<p>This module contains utility code to deal with qubit topologies.</p>\n"}, {"fullname": "pauliopt.topologies.Coupling", "modulename": "pauliopt.topologies", "qualname": "Coupling", "kind": "class", "doc": "<p>Type for couplings in a qubit topology, i.e. unordered\npairs of adjacent qubits.</p>\n", "bases": "typing.FrozenSet[int]"}, {"fullname": "pauliopt.topologies.Coupling.as_pair", "modulename": "pauliopt.topologies", "qualname": "Coupling.as_pair", "kind": "variable", "doc": "<p>Returns the coupling as a (increasingly) ordered pair.</p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "pauliopt.topologies.CouplingLike", "modulename": "pauliopt.topologies", "qualname": "CouplingLike", "kind": "variable", "doc": "<p>Type alias for things that could be used to specify couplings,\nnamely any collection of <code>int</code> (subject to additional restrictions).</p>\n\n<p>In an ideal world, this should be \"int collections of len 2\",\nbut static typing does not yet allow for such a constraint.</p>\n", "default_value": "typing.Collection[int]"}, {"fullname": "pauliopt.topologies.TopologyDict", "modulename": "pauliopt.topologies", "qualname": "TopologyDict", "kind": "class", "doc": "<p>The type of the dictionary returned by <code>Topology.as_dict</code>,\nsuitable for JSON serialization.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "pauliopt.topologies.TopologyDict.num_qubits", "modulename": "pauliopt.topologies", "qualname": "TopologyDict.num_qubits", "kind": "variable", "doc": "<p>Property exposing the number of qubits in the topology.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.topologies.TopologyDict.couplings", "modulename": "pauliopt.topologies", "qualname": "TopologyDict.couplings", "kind": "variable", "doc": "<p>Property exposing the couplings between qubits in the topology.</p>\n", "annotation": ": List[List[int]]"}, {"fullname": "pauliopt.topologies.Layouts", "modulename": "pauliopt.topologies", "qualname": "Layouts", "kind": "variable", "doc": "<p>Possible layout values for <code>Topology.draw</code></p>\n", "annotation": ": Final[Tuple[str, ...]]", "default_value": "(&#x27;circular&#x27;, &#x27;kamada_kawai&#x27;, &#x27;random&#x27;, &#x27;shell&#x27;, &#x27;spring&#x27;, &#x27;spectral&#x27;, &#x27;spiral&#x27;)"}, {"fullname": "pauliopt.topologies.Topology", "modulename": "pauliopt.topologies", "qualname": "Topology", "kind": "class", "doc": "<p>Container class for a qubit topology.</p>\n"}, {"fullname": "pauliopt.topologies.Topology.__init__", "modulename": "pauliopt.topologies", "qualname": "Topology.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">couplings</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "pauliopt.topologies.Topology.num_qubits", "modulename": "pauliopt.topologies", "qualname": "Topology.num_qubits", "kind": "variable", "doc": "<p>Readonly property returning the number of qubits in this topology.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.topologies.Topology.qubits", "modulename": "pauliopt.topologies", "qualname": "Topology.qubits", "kind": "variable", "doc": "<p>Readonly property returning the range of qubits in this topology.</p>\n", "annotation": ": range"}, {"fullname": "pauliopt.topologies.Topology.couplings", "modulename": "pauliopt.topologies", "qualname": "Topology.couplings", "kind": "variable", "doc": "<p>Readonly property exposing the couplings between qubits in this topology.</p>\n", "annotation": ": FrozenSet[pauliopt.topologies.Coupling]"}, {"fullname": "pauliopt.topologies.Topology.as_dict", "modulename": "pauliopt.topologies", "qualname": "Topology.as_dict", "kind": "variable", "doc": "<p>Readonly property returning this topology as\na dictionary, for serialization purposes.</p>\n", "annotation": ": Union[str, pauliopt.topologies.TopologyDict]"}, {"fullname": "pauliopt.topologies.Topology.is_planar", "modulename": "pauliopt.topologies", "qualname": "Topology.is_planar", "kind": "variable", "doc": "<p>Whether this qubit topology is a planar graph.</p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.topologies.Topology.available_nx_layouts", "modulename": "pauliopt.topologies", "qualname": "Topology.available_nx_layouts", "kind": "variable", "doc": "<p>Readonly property returning the available layouts for this qubit topology.</p>\n", "annotation": ": Tuple[str, ...]"}, {"fullname": "pauliopt.topologies.Topology.to_nx", "modulename": "pauliopt.topologies", "qualname": "Topology.to_nx", "kind": "variable", "doc": "<p>Readonly property returning a NetworkX graph version of this topology.\nRequires the 'networkx' library to work.</p>\n"}, {"fullname": "pauliopt.topologies.Topology.draw", "modulename": "pauliopt.topologies", "qualname": "Topology.draw", "kind": "function", "doc": "<p>Draws this qubit topology using NetworkX and Matplotlib.</p>\n\n<p>The <code>layout</code> keyword argument can be used to select a NetworkX layout\nfrom the available ones (exposed by <code>Topology.available_nx_layouts</code>).\nThe <code>figsize</code> keyword argument is passed to <code>matplotlib.pyplot.figure</code>:\nif specified, it determines the width and height of the figure being drawn.\nKeyword arguments <code>kwargs</code> are those of <code>networkx.draw_networkx</code>.\nIf the keyword argument <code>filename</code> is set, the figure is also saved.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kamada_kawai&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.adjacent", "modulename": "pauliopt.topologies", "qualname": "Topology.adjacent", "kind": "function", "doc": "<p>Readonly property exposing the (frozen) set of qubits adjacent\nto (i.e. couple with) the given qubit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">FrozenSet</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.incident", "modulename": "pauliopt.topologies", "qualname": "Topology.incident", "kind": "function", "doc": "<p>Readonly property returning an iterator running over all couplings\nincident onto the given qubit.</p>\n\n<p>This is returned as an iterator, rather than a collection,\nbecause the couplings are generated on the fly (i.e. this is not\nmerely exposing some internal collection).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Coupling</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.dist", "modulename": "pauliopt.topologies", "qualname": "Topology.dist", "kind": "function", "doc": "<p>Returns the distance between two given qubits in the topology.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fro</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.mapped_fwd", "modulename": "pauliopt.topologies", "qualname": "Topology.mapped_fwd", "kind": "function", "doc": "<p>Returns a topology with the same couplings, but remapping the qubits using\nthe given mapping.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.shortest_path", "modulename": "pauliopt.topologies", "qualname": "Topology.shortest_path", "kind": "function", "doc": "<p>Computes the shortest path using the next lookup table from the Floyd\u2013Warshall algorithm</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fro</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.steiner_tree", "modulename": "pauliopt.topologies", "qualname": "Topology.steiner_tree", "kind": "function", "doc": "<p>Computes the Steiner tree over the topology with given terminals.\n<code>subgraph</code> can be used to find the Steiner tree of a subgraph of the topology.\nRequires networkx to be installed to work.\nReturns a networkx Graph.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">terminals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">subgraph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.non_cutting_qubits", "modulename": "pauliopt.topologies", "qualname": "Topology.non_cutting_qubits", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subgraph</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.mapped_bwd", "modulename": "pauliopt.topologies", "qualname": "Topology.mapped_bwd", "kind": "function", "doc": "<p>Returns a topology with the same couplings, but remapping the qubits using\nthe inverse of the given mapping.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.from_dict", "modulename": "pauliopt.topologies", "qualname": "Topology.from_dict", "kind": "function", "doc": "<p>Creates a <code>Topology</code> instance from a dictionary in the\nformat obtained from <code>Topology.as_dict</code>,\nfor de-serialization purposes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">TopologyDict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.line", "modulename": "pauliopt.topologies", "qualname": "Topology.line", "kind": "function", "doc": "<p>Creates a line topology on the given number of qubits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.cycle", "modulename": "pauliopt.topologies", "qualname": "Topology.cycle", "kind": "function", "doc": "<p>Creates a cycle topology on the given number of qubits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.complete", "modulename": "pauliopt.topologies", "qualname": "Topology.complete", "kind": "function", "doc": "<p>Creates a complete topology on the given number of qubits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.grid", "modulename": "pauliopt.topologies", "qualname": "Topology.grid", "kind": "function", "doc": "<p>Creates a grid topology with the given number of rows and cols.\nQubits are indexed by rows.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_cols</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.periodic_grid", "modulename": "pauliopt.topologies", "qualname": "Topology.periodic_grid", "kind": "function", "doc": "<p>Creates a periodic grid topology with the given number of rows and cols.\nQubits are indexed by rows.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_cols</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.from_qiskit_config", "modulename": "pauliopt.topologies", "qualname": "Topology.from_qiskit_config", "kind": "function", "doc": "<p>Static method to construct the topology from a\nQiskit backend configuration.</p>\n\n<p>This method relies on the <code>qiskit</code> library being available.\nSpecifically, the <code>config</code> argument must be of type\n<code>qiskit.providers.models.QasmBackendConfiguration</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Topology.from_qiskit_backend", "modulename": "pauliopt.topologies", "qualname": "Topology.from_qiskit_backend", "kind": "function", "doc": "<p>Static method to construct the topology from a Qiskit backend.</p>\n\n<p>This method relies on the <code>qiskit</code> library being available.\nSpecifically, the <code>backend</code> argument must be of type\n<code>qiskit.providers.Backend</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">backend</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Matching", "modulename": "pauliopt.topologies", "qualname": "Matching", "kind": "class", "doc": "<p>Mutable container class for a matching on a qubit topology.</p>\n"}, {"fullname": "pauliopt.topologies.Matching.__init__", "modulename": "pauliopt.topologies", "qualname": "Matching.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">topology</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Topology</span></span>)</span>"}, {"fullname": "pauliopt.topologies.Matching.topology", "modulename": "pauliopt.topologies", "qualname": "Matching.topology", "kind": "variable", "doc": "<p>Readonly property exposing the qubit topology\nunderlying this matching.</p>\n", "annotation": ": pauliopt.topologies.Topology"}, {"fullname": "pauliopt.topologies.Matching.matched_couplings", "modulename": "pauliopt.topologies", "qualname": "Matching.matched_couplings", "kind": "variable", "doc": "<p>Readonly property returning the collection of couplings\ncurrently in this matching.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[pauliopt.topologies.Coupling]"}, {"fullname": "pauliopt.topologies.Matching.matched_qubits", "modulename": "pauliopt.topologies", "qualname": "Matching.matched_qubits", "kind": "variable", "doc": "<p>Readonly property returning the collection of qubits\ncurrently matched in this matching.</p>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[int]"}, {"fullname": "pauliopt.topologies.Matching.flippable_couplings", "modulename": "pauliopt.topologies", "qualname": "Matching.flippable_couplings", "kind": "variable", "doc": "<p>Readonly property returning the collection of couplings\nthat can be currently flipped in this matching, namely:</p>\n\n<ul>\n<li>all couplings currently in the matching (will be removed by flip);</li>\n<li>all couplings with both qubits currently not matched by the matching\n(will be added by flip).</li>\n</ul>\n\n<p>This collection is freshly generated at every call.</p>\n", "annotation": ": FrozenSet[pauliopt.topologies.Coupling]"}, {"fullname": "pauliopt.topologies.Matching.incident", "modulename": "pauliopt.topologies", "qualname": "Matching.incident", "kind": "function", "doc": "<p>Returns the coupling incident to the given qubit in this matching,\nor <code>None</code> if the qubit is not matched.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">qubit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Coupling</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Matching.is_flippable", "modulename": "pauliopt.topologies", "qualname": "Matching.is_flippable", "kind": "function", "doc": "<p>Checks whether the coupling can be flipped:</p>\n\n<ul>\n<li>always true if the coupling is already present in the matching;</li>\n<li>otherwise true only if neither qubit in the coupling is currently matched.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coupling</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.topologies.Matching.flip", "modulename": "pauliopt.topologies", "qualname": "Matching.flip", "kind": "function", "doc": "<p>Flips the given coupling in the matching (removes it if it is already present,\nadds it if it is not yed present and can be added).\nRaises <code>ValueError</code> if the coupling is not flippable.</p>\n\n<p>The matching is modified in-place and then returned, as per the\n<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent API pattern</a>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coupling</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">topologies</span><span class=\"o\">.</span><span class=\"n\">Matching</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils", "modulename": "pauliopt.utils", "kind": "module", "doc": "<p>Utility classes and functions for the <code>pauliopt</code> library.</p>\n"}, {"fullname": "pauliopt.utils.calculate_orthogonal_point", "modulename": "pauliopt.utils", "qualname": "calculate_orthogonal_point", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">left</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.AngleInitT", "modulename": "pauliopt.utils", "qualname": "AngleInitT", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Union[int, fractions.Fraction, str, decimal.Decimal]"}, {"fullname": "pauliopt.utils.AngleExpr", "modulename": "pauliopt.utils", "qualname": "AngleExpr", "kind": "class", "doc": "<p>A container class for angle expressions.</p>\n", "bases": "abc.ABC"}, {"fullname": "pauliopt.utils.AngleExpr.repr_latex", "modulename": "pauliopt.utils", "qualname": "AngleExpr.repr_latex", "kind": "variable", "doc": "<p>LaTeX math mode representation of this number.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.utils.AngleExpr.to_qiskit", "modulename": "pauliopt.utils", "qualname": "AngleExpr.to_qiskit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "pauliopt.utils.AngleExpr.is_zero", "modulename": "pauliopt.utils", "qualname": "AngleExpr.is_zero", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.AngleExpr.is_pi", "modulename": "pauliopt.utils", "qualname": "AngleExpr.is_pi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.AngleExpr.is_zero_or_pi", "modulename": "pauliopt.utils", "qualname": "AngleExpr.is_zero_or_pi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.Angle", "modulename": "pauliopt.utils", "qualname": "Angle", "kind": "class", "doc": "<p>A container class for angles,\nas rational multiples of PI modulo 2PI.</p>\n", "bases": "AngleExpr"}, {"fullname": "pauliopt.utils.Angle.__init__", "modulename": "pauliopt.utils", "qualname": "Angle.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">.</span><span class=\"n\">Decimal</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "pauliopt.utils.Angle.value", "modulename": "pauliopt.utils", "qualname": "Angle.value", "kind": "variable", "doc": "<p>The value of this angle as a fraction of PI.</p>\n", "annotation": ": fractions.Fraction"}, {"fullname": "pauliopt.utils.Angle.as_root_of_unity", "modulename": "pauliopt.utils", "qualname": "Angle.as_root_of_unity", "kind": "variable", "doc": "<p>Returns <code>(a,n)</code> where <code>n</code> is the smallest such\nthat this angle is an $n$-th root of unity\nand <code>0 &lt;= a &lt; n</code> such that this is $e^{i 2\\pi \\frac{a}{n}}$</p>\n", "annotation": ": Tuple[int, int]"}, {"fullname": "pauliopt.utils.Angle.order", "modulename": "pauliopt.utils", "qualname": "Angle.order", "kind": "variable", "doc": "<p>The order of this angle as a root of unity.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.utils.Angle.is_zero_or_pi", "modulename": "pauliopt.utils", "qualname": "Angle.is_zero_or_pi", "kind": "variable", "doc": "<p>Whether this angle is a multiple of pi.</p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.Angle.is_zero", "modulename": "pauliopt.utils", "qualname": "Angle.is_zero", "kind": "variable", "doc": "<p>Whether this angle is a multiple of 2pi.</p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.Angle.is_pi", "modulename": "pauliopt.utils", "qualname": "Angle.is_pi", "kind": "variable", "doc": "<p>Whether this angle is an odd multiple of pi.</p>\n", "annotation": ": bool"}, {"fullname": "pauliopt.utils.Angle.to_qiskit", "modulename": "pauliopt.utils", "qualname": "Angle.to_qiskit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "pauliopt.utils.Angle.repr_latex", "modulename": "pauliopt.utils", "qualname": "Angle.repr_latex", "kind": "variable", "doc": "<p>LaTeX math mode representation of this number.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.utils.Angle.random", "modulename": "pauliopt.utils", "qualname": "Angle.random", "kind": "function", "doc": "<p>Generates a random angle with the given <code>subdivision</code>:\n<code>r * pi/subdivision</code> for random <code>r in range(2*subdivision)</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">subdivision</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rng_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nonzero</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Angle</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.Angle.zero", "modulename": "pauliopt.utils", "qualname": "Angle.zero", "kind": "variable", "doc": "<p>A constant for the angle 0.</p>\n", "annotation": ": Final[pauliopt.utils.Angle]", "default_value": "0"}, {"fullname": "pauliopt.utils.Angle.pi", "modulename": "pauliopt.utils", "qualname": "Angle.pi", "kind": "variable", "doc": "<p>A constant for the angle pi.</p>\n", "annotation": ": Final[pauliopt.utils.Angle]", "default_value": "pi"}, {"fullname": "pauliopt.utils.pi", "modulename": "pauliopt.utils", "qualname": "pi", "kind": "variable", "doc": "<p>Constant for <code>Angle.pi</code>.</p>\n", "annotation": ": Final[pauliopt.utils.Angle]", "default_value": "pi"}, {"fullname": "pauliopt.utils.\u03c0", "modulename": "pauliopt.utils", "qualname": "\u03c0", "kind": "variable", "doc": "<p>Constant for <code>Angle.pi</code>.</p>\n", "annotation": ": Final[pauliopt.utils.Angle]", "default_value": "pi"}, {"fullname": "pauliopt.utils.SumprodAngleExpr", "modulename": "pauliopt.utils", "qualname": "SumprodAngleExpr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">exprs</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">coeffs</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">fractions</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.ModAngleExpr", "modulename": "pauliopt.utils", "qualname": "ModAngleExpr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>,</span><span class=\"param\">\t<span class=\"n\">mod</span><span class=\"p\">:</span> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">AngleExpr</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.AngleVar", "modulename": "pauliopt.utils", "qualname": "AngleVar", "kind": "class", "doc": "<p>A container class for angle expressions.</p>\n", "bases": "AngleExpr"}, {"fullname": "pauliopt.utils.AngleVar.__init__", "modulename": "pauliopt.utils", "qualname": "AngleVar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">latex_label</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pauliopt.utils.AngleVar.to_qiskit", "modulename": "pauliopt.utils", "qualname": "AngleVar.to_qiskit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "pauliopt.utils.AngleVar.repr_latex", "modulename": "pauliopt.utils", "qualname": "AngleVar.repr_latex", "kind": "variable", "doc": "<p>LaTeX math mode representation of this number.</p>\n", "annotation": ": str"}, {"fullname": "pauliopt.utils.SVGBuilder", "modulename": "pauliopt.utils", "qualname": "SVGBuilder", "kind": "class", "doc": "<p>Utility class for building certain SVG images.\nFollows the <a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">Fluent interface pattern</a>.</p>\n"}, {"fullname": "pauliopt.utils.SVGBuilder.__init__", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "pauliopt.utils.SVGBuilder.width", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.width", "kind": "variable", "doc": "<p>The figure width.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.utils.SVGBuilder.height", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.height", "kind": "variable", "doc": "<p>The figure height.</p>\n", "annotation": ": int"}, {"fullname": "pauliopt.utils.SVGBuilder.tags", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.tags", "kind": "variable", "doc": "<p>The current sequence of tags.</p>\n", "annotation": ": Sequence[str]"}, {"fullname": "pauliopt.utils.SVGBuilder.line", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.line", "kind": "function", "doc": "<p>Draws a line from given coordinates to given coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fro</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.line_bend", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.line_bend", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fro</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">left</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.add_diagonal_fill", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.add_diagonal_fill", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color_1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">color_2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.square", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.square", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">centre</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.text_with_square", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.text_with_square", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">centre</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.circle", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.circle", "kind": "function", "doc": "<p>Draws a circle with given centre and radius.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">centre</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.rect", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.rect", "kind": "function", "doc": "<p>Draws a rectangle with given centre, width and height.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">centre</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.SVGBuilder.text", "modulename": "pauliopt.utils", "qualname": "SVGBuilder.text", "kind": "function", "doc": "<p>Draws text at the given position (stroke/fill not used).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">SVGBuilder</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.TempSchedule", "modulename": "pauliopt.utils", "qualname": "TempSchedule", "kind": "class", "doc": "<p>Protocol for a temperature schedule.\nThe temperature is a number (int or float) computed from the iteration\nnumber <code>it</code> (starting from 0) and the total number of iterations <code>num_iter</code>\n(passed as a keyword argument).</p>\n", "bases": "typing.Protocol"}, {"fullname": "pauliopt.utils.TempSchedule.__init__", "modulename": "pauliopt.utils", "qualname": "TempSchedule.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pauliopt.utils.TempScheduleProvider", "modulename": "pauliopt.utils", "qualname": "TempScheduleProvider", "kind": "class", "doc": "<p>Protocol for a function constructing a temperature schedule\nfrom an initial and final temperatures.</p>\n", "bases": "typing.Protocol"}, {"fullname": "pauliopt.utils.TempScheduleProvider.__init__", "modulename": "pauliopt.utils", "qualname": "TempScheduleProvider.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pauliopt.utils.linear_temp_schedule", "modulename": "pauliopt.utils", "qualname": "linear_temp_schedule", "kind": "function", "doc": "<p>Returns a straight/linear temperature schedule for given initial and final temperatures,\nfrom <a href=\"https://link.springer.com/article/10.1007/BF00143921\">https://link.springer.com/article/10.1007/BF00143921</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_init</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">t_final</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">TempSchedule</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.geometric_temp_schedule", "modulename": "pauliopt.utils", "qualname": "geometric_temp_schedule", "kind": "function", "doc": "<p>Returns a geometric temperature schedule for given initial and final temperatures,\nfrom <a href=\"https://link.springer.com/article/10.1007/BF00143921\">https://link.springer.com/article/10.1007/BF00143921</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_init</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">t_final</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">TempSchedule</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.reciprocal_temp_schedule", "modulename": "pauliopt.utils", "qualname": "reciprocal_temp_schedule", "kind": "function", "doc": "<p>Returns a reciprocal temperature schedule for given initial and final temperatures,\nfrom <a href=\"https://link.springer.com/article/10.1007/BF00143921\">https://link.springer.com/article/10.1007/BF00143921</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_init</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">t_final</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">TempSchedule</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.log_temp_schedule", "modulename": "pauliopt.utils", "qualname": "log_temp_schedule", "kind": "function", "doc": "<p>Returns a logarithmic temperature schedule for given initial and final temperatures,\nfrom <a href=\"https://link.springer.com/article/10.1007/BF00143921\">https://link.springer.com/article/10.1007/BF00143921</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t_init</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">t_final</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pauliopt</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">TempSchedule</span>:</span></span>", "funcdef": "def"}, {"fullname": "pauliopt.utils.StandardTempScheduleName", "modulename": "pauliopt.utils", "qualname": "StandardTempScheduleName", "kind": "variable", "doc": "<p>Names of the standard temperature schedules.</p>\n", "default_value": "typing.Literal[&#x27;linear&#x27;, &#x27;geometric&#x27;, &#x27;reciprocal&#x27;, &#x27;log&#x27;]"}, {"fullname": "pauliopt.utils.StandardTempSchedule", "modulename": "pauliopt.utils", "qualname": "StandardTempSchedule", "kind": "variable", "doc": "<p>Type for standard temperature schedules.</p>\n", "default_value": "typing.Tuple[typing.Literal[&#x27;linear&#x27;, &#x27;geometric&#x27;, &#x27;reciprocal&#x27;, &#x27;log&#x27;], typing.Union[int, float], typing.Union[int, float]]"}, {"fullname": "pauliopt.utils.StandardTempSchedules", "modulename": "pauliopt.utils", "qualname": "StandardTempSchedules", "kind": "variable", "doc": "<p>Dictionary of standard temperature schedule providers.</p>\n", "annotation": ": Final[Mapping[Literal[&#x27;linear&#x27;, &#x27;geometric&#x27;, &#x27;reciprocal&#x27;, &#x27;log&#x27;], pauliopt.utils.TempScheduleProvider]]", "default_value": "{&#x27;linear&#x27;: &lt;function linear_temp_schedule&gt;, &#x27;geometric&#x27;: &lt;function geometric_temp_schedule&gt;, &#x27;reciprocal&#x27;: &lt;function reciprocal_temp_schedule&gt;, &#x27;log&#x27;: &lt;function log_temp_schedule&gt;}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();